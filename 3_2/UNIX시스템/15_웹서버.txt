
 웹 서버.



 # 웹 서버의 개요.

웹 서버.
클라이언트의 HTTP 요청을 처리하여 웹 페이지의 내용을 클라이언트에게 제공하는 서버 프로그램.
웹 페이지를 요청하고 보여주는 웹 브라우저는 클라이언트임.
널리 사용되는 웹 서버 : Apache(48%), Nginx(35.6%), IIS(10.7%) 등.

HTTP HyperText Transfer Protocol.
웹 환경에서 서버와 클라이언트 간에 정보를 주고 받기 위한 프로토콜.
클라이언트가 서버에게 특정 자원에 대한 요청( Get, Post )을 보냄.
클라이언트의 요청에 대해 서버가 응답함.
대부분 TCP를 사용하며, 포트 번호는 일반적으로 80번을 사용함.



 # APM 개요.

APM Apache, PHP, MySQL 개요.
Apache HTTP 서버, PHP 스크립트 처리기, MySQL 데이터베이스 관리시스템을 지칭함.
동적으로 웹 페이지를 만들고, 또 웹 페이지 생성에 필욯나 데이터를 관리할 수 있는 프로그램이 필요함.
모두 공개 소프트웨어로 웹 사이트 구축을 위한 비용절감의 방법으로 많이 사용.
리눅스 시스템에서 많이 사용되어 LAMP( Linux, Apache, MySQL, PHP )로 불리기도 한다.

APM을 이용하는 웹 서버의 동작 과정.
클라이언트가 웹 문서를 Apache 웹 서버에 요청.
웹 문서 내에 있는 PHP 스크립트가 PHP 모듈 등에 의해 처리되어 HTML 문서가 생성되어 응답함.
PHP 스크립트 처리 과정 중 MySQL 데이터베이스에 접근하여 데이터의 CRUD 등 질의 수행 가능함.

PHP 스크립트 처리기.
PHP는 동적으로 웹 페이지를 생성할 수 있는 스크립트 언어.
서버에서 실행되며 HTML 파일에 포함되어 사용됨.
PHP 대신 다른 스크립트 언어인 Perl 이나 Python을 이용하여 APM 구축이 가능함.

MySQL 데이터베이스 관리 시스템.
데이터베이스 관리 시스템으로 C/C++, C#, Java, PHP 등 다양한 언어에서 사용할 수 있도록 API 제공.
PHP에서 MySQL을 사용하려면 'php-mysql'  패키지를 설치해야 함.



 # APM 설치.

Apache.
대부분의 리눅스 배포판이 APM을 포함하고 있어서 별도 설치가 필요하지 않을 수 있다.

설치 확인법.
yum list installed | grep httpd
yum list installed | grep mysql
yum list installed | grep php
httpd는 Apache HTTP 서버 프로그램의 이름으로 http데몬을 의미한다.

설치 명령어.
yum -y install httpd
yum -y update httpd
yum -y install mysql mysql-server
yum -y install php
yum -y install php-mysql

패키지 관리 도구를 사용한 PHP 설치.
데스크톱 메뉴 -> 시스템 -> 관리 -> 소프트웨어 [추가/제거] 실행 -> Web Services -> PHP 지원.

Apache와 PHP의 설치 확인.
방화벽 설정( TCP 80 포트 )과 httpd 데몬의 실행을 먼저 확인함.
Apach 설치 확인. ( http://localhost를 실행 )
PHP 설치 확인. ( /var/www./html/textphph를 작성 후 http://localhost/text.php를 실행 )



 # Apache 설정.

Apache 설정.
/etc/httpd/conf/httpd.conf : Apache웹 서버의 설정파일. ( 100라인이 넘는다 )
/etc/httpd/conf.d/ : 기타 설정 파일이 위치한다.
설정을 변경한 후에는 Apache 서버를 다시 시작해야 효력이 발생함. ( service httpd restart )
chkconfig httpd on : 부팅 시 자동으로 서비스를 시작하게 하는 방법.

ServerRoot
Apache 서버가 설치된 디렉토리.
일반적으로 기본값은 /etc/httpd.

Timeout.
클라이언트로부터 수신을 기다리는 최대 대기 시간을 초 단위로 설정.
설정 값이 60인 경우 60초 이내에 TCP 패킷을 모두 받거나 보낸 후 확인 패킷을 받아야함.
( 받거나 보내지 않으면 연결이 끊김 )

PidFile.
주 서버 프로세스로 httpd의 PID가 기록되는 파일을 설정함.
run/httpd.pid로 설정.

KeepAlive.
클라이언트가 한 번의 연결로 서버와 여러 번의 요청과 응답을 주고 받을 수 있도록 연결을 허용할지 결정.

MaxKeepAliveRequest.
KeepAlive가 On으로 설정된 경우, 클라이언트가 지속적인 연결을 통해 보낼 수 있는 최대 요청의 수 설정.

KeepAliveTimeout.
연결을 끊지 않고 다음 요청을 대기하는 최대 시간.
15로 설정하면 15초 동안 클라이언트로부터 요청을 기다림.

StartServers.
초기에 생성하는 자식 서버 프로세스의 수를 설정. ( 기본 값 8 )

MinSpareServers와 MaxSpareServers.
유휴 자식 서버 프로세스 수의 최솟값, 최댓값을 설정.

MaxClients.
동시에 접속 가능한 클라이언트 수의 최댓값 설정.

MaxRequestsPerChild.
1개 자식 서버 프로세스가 종료 전까지 처리할 수 있는 최대 요청 수.
최대 요청 수를 넘으면 자식 서버 프로세스를 종료함.
설정 값이 0인 경우 요청 수에 제한이 없음을 의미.

Listen.
서버가 사용할 TCP 포트 번호를 설정.
ip주소와 포트를 지정함.
예 : Listen 80
예 : Listen 12.34.56.78 : 80

LoadModule.
웹 서버의 기능을 확장시키는 DSO( Dynamic Shared Object )모듈을 설정.
Apache 웹 서버의 특징은 모듈화.
모듈을 추가로 로드함으로써 새로운 기능을 추가할 수 있음.
예 : LoadModule auth_basic_module ~~~

User와 Group.
Apache 서버의 실행에 사용되는 사용자와 그룹.
서버는 초기에 root 계정으로 실행되나, 실행 후 낮은 권한의 계정으로 실행되어야 함.
User와 Group을 root로 지정하면 안됨. ( 보안문제 )

ServerAdmin.
웹 서버 관리자의 이메일 주소를 설정.

DocumentRoot.
웹 서버가 웹 콘텐츠를 저장하는 루트 디렉토리.
/var/www/html/파일이름 = www.localhost/파일이름

UserDir.
클라이언트 요청에서 ~userid가 있는 경우의 처리 여부를 설정.
설정 값이 disabled로 설정된 경우 사용자 계정의 홈 디렉토리로 변환하지 않음.

DirectoryIndex.
클라이언트가 디렉토리를 요청한 경우, 기본으로 사용할 웹 페이지의 파일 이름을 설정.
일반적으로 index.html로 설정.

ErrorLog.
웹 서버의 에러 로르가 기록될 파일을 설정.
설정 값이 logs/error_log인 경우,
ServerRoot의 설정 값에 더해져서 /etc/httpd/logs/error_log 파일에 에러 로그가 기록됨.

AddLanguage.
웹 서버를 통해 서비스되는 웹 문서의 지원 언어를 설정. ( 웹 서버가 다국어를 사용하는 경우 )
한국어를 추가하는 경우 ko .ko를 설정 값으로 추가하면 됨.
언어를 추가할 때마다 다음과 같이 새로운 줄로 설정.
예 : AddLanguage ko .ko

AddDefaultCharset.
웹 서버에서 제공하는 응답 문서의 Content-Type이 text/plain 또는 text/html인 경우 
기본 문자 집합을 설정. ( UTF-8 )



 # APM을 이용한 웹 서비스.

PHP 설정.
/etc/httpd/conf.d/php.conf : APM과 관련된 php 설정 파일.
/etc/php.ini : php 자체의 기본 설정 파일

MySQL 설정.
/etc/my.cnf : MySQL 설정 파일.
/usr/share/mysql : 시스템 규모에 따른 다양한 설정 파일이 제공.

MySQL 추가설정.
mysql_secure_installation을 실행하여 추가적인 정보를 설정할 수 있다.
root 계정 비밀번호 설정.
익명 사용자 허용 여부, root 계정의 원격 로그인 허용 여부.
test 데이터베이스의 제거 여부.



