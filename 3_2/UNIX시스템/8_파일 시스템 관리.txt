
 파일 시스템 관리.



 # 마운트와 언마운트.

마운트.
파일 시스템을 전체 디렉토리 구조의 특정 디렉토리에 연결하는 것.
저장 장치에 파티션이 존재하며, 파티션에 파일 시스템을 만들어져 있음.
마운트되는 위치를 마운트 지점이라 함.

/etc/fstab 파일.
리눅스 시스템이 부팅될 때 자동으로 마운트할 파일 시스템의 목록을 가진 설정 파일.
각 라인마다 개별 파일 시스템의 마운트 정보가 기록되어 있음.

/etc/fstab 라인을 구성하는 항목의 의미.
디바이스 : 장치의 이름으로 디바이스 파일 또는 UUID( Universally Unique IDentifier )가 사용됨.
마운트 지점 : 파일 시스템 트리에서 디바이스가 부착되는 위치. ( 디렉토리 )
파일시스템 유형 : 리눅스에서 허용하는 파일 시스템의 유형.
옵션 : 마운트 옵션으로 mount 명령으로 -o 옵션을 사용하는 것과 의미가 같음.
덤프 여부 : 백업을 위한 것으로 0은 덤프를 하지 말라는 것이며 1은 하라는 것.
파일 시스템 검사 여부 : 0은 검사하지 마라, 1은 루트 파일 시스템 검사, 2는 나머지 파일 시스템 검사.

마운트와 /etc/fstab 파일.
UUID는 파일 시스템을 유일하게 구분하는 숫자. ( 32자리 16진수 )
마운트 또는 언마운트를 하면 내용이 /etc/mtab 파일에 기록됨.
추가로 마운트한 것 없이 mount를 실행하면 /etc/fstab 파일의 내용과 거의 유사함.
기본 마운트 옵션은 rw, suid, dev, exec, auto, nouser, async가 적용됨.

mount 명령.
파일 시스템을 지정된 디렉토리에 붙여 파일 시스템을 사용할 수 있게 함.
형태 : moint -a [options] [-t type], mount [options] [-o mount_options] device | directory
옵션 -a는 /etc/fstab 파일에 기록된 모든 파일 시스템을 마운트 함.
옵션 -a가 사용되지 않으면 지정된 장치( 또는 디렉토리 )에 해당하는 것을 찾아 마운트 함.
옵션 -t가 추가되몐 해당 유형의 파일 시스템만 마운트 함.
옵션 -o는 파일 시스템을 마운트 할 때 사용할 옵션.
예 : mount -a -t iso9960.
예 : mount /dev/cdrom.
예 : mount /mnt/cdrom.

일반적인 mount 명령.
형태 : mount [options] [-t type] [-o mount_options] device directory.
mount 명령을 실행하기 전 마운트 지점( 디렉토리 )를 생성해야 함.
해당 장치가 존재하는지, 파일 시스템 종류가 맞는지 확인함.
존재한다면 /etc/fstab 파일에서 해당 파티션에 지정된 옵션을 적용하고, -o 적용.
예 : mount -t ext4 /dev/sdb1 /mnt/data1
예 : mount -t iso9960 -o ro /dev/sr0 /media/cd
예 : mount -t vfat /dev/hda3 /mnt/win98

umount 명령.
디렉토리에 마운트 되어 있는 저장 장치를 해당 디렉토리로부터 분리.
형태 : umount -a [-nv] [-t fs_type] , umount [-nv] device | directory
-a는 모든 파일 시스템을 언마운트를 의미
예 : umount -a -t iso9660.
예 : umount /dev/sr0.
예 : umount /media/usb.



 # 파티션 관리.

파티션.
물리적 저장 장치를 논리적으로 분할한 구역.
하나의 파티션을 독립적 저장 장치처럼 사용할 수 있음.
파티션은 /dev/sda1, /dev/sda2, ...
전통적 MBR 유형 파티션 테이블은 4개의 primary 파티션을 저장할 수 있음.
MBR에는 부트코드와 파티션의 정보를 저장하는 파티션 테이블이 있다.
파티션 테이블에는 4개의 primary 파티션의 정보를 담고 있다.
MBR는 2**32 = 2TB라서 2TB를 넘는 경우가 많이 발생해 잘 사용하지 않는다.

디스크를 파티션으로 분할하여 사용하는 경우.
여러 운영체제를 별도의 파티션에 설치하여 멀티 부팅을 사용.
특정 파티션이 손상되더라도 다른 파티션의 데이터는 보존됨.
파티션 별로 다른 파일 시스템을 만들 수 있음.
/boot 영역을 별도의 파티션으로 분리하여 빠르게 부팅함.
/var 영역을 별도의 파티션으로 만들어 가용공간이 줄어드는 문제를 루트(/) 영역과 분리함.
가상 메모리로 사용될 스왑 영역을 별도의 파티션으로 구성함.

파티션 관리 도구. ( root만 가능 )
파티션과 파티션 테이블을 관리하는 프로그램.
MBR 유형 파티션 테이블은 파티션 최대 크기의 제약이 있음.
최근 운영체제는 GPT 유형의 파티션 테이블을 지원함.
파티션의 생성, 삭제, 이동, 크기 변경 및 복사 기능을 제공.
파일 시스템을 관리할 때는 다른 도구를 사용하는 것이 좋음.

파티션 관리 도구 종류.
fdisk는 전통적 텍스트 기반 대화식 도구로 GPT는 지원하지 않음.
parted는 MBR과 GPT를 모두 지원.
gdisk는 GPT를 지원하며, gparted는 gparted의 그래픽 버전.

파티션 관리 도구 사용.
parted -l 또는 fdisk -l 명령은 모든 블록 디바이스에서 파티션 정보를 보여줌.
fdisk -l | grep /dev/sda : 파티션 중에 sda를 포함하는 라인을 보여줌.

파티션 만들기.
저장 장치를 실제로 사용하려면 파티션을 만들고, 파일 시스템을 만들어 주어야 함.
parted 또는 fdisk 명령을 사용하여 파티션을 만들 수 있음.
mkfs 명령으로 파일 시스템을 만듦.
VirtualBox 메뉴의 설정-> 저장소 -> 컨트롤러 IDE -> 하드 디스크 추가 하기를 실행.
가상 머신에 USB 메모리를 장착 후 가상 머신 메뉴에서 마운트할 수 있음.
저장장치를 알아보기 위해 ls /dev/sd*, parted -l 또는 tail -f /var/log/messages 명령을 사용할 수 있음.



 # 볼륨 관리.

볼륨.
볼륨은 크기가 재조정될 수 있는 파티션.
디스크 관리 또는 파티션 관리를 위해 새롭게 등장한 개념.
여러 디스크에 걸쳐 있는 볼륨을 만들 수 있음.

볼륨 용어.
물리 볼륨 PV : 하나의 물리적 디스크.
볼륨 그룹 VG : 여러 물리 볼륨을 하나로 묶은 것으로 파티션의 한 종류.
논리 볼륨 LV : 볼륨 그룹에서 가용한 공간을 분할한 것으로 개념적으로 기존 파티션과 일치함.
물리 익스텐트 PE : 물리 볼륨이 나누어진 데이터 묶음.
논리 익스텐트 LE : 논리 볼륨이 나누어진 데이터 묶음. 

논리 볼륨 만들기.
하드디스크에서 파티션을 만듦.
하드디스크의 파티션을 물리 볼륨( pv )으로 만듦.
하나 이상의 물리 볼륨( pv )을 할당하여 볼륨 그룹( vg )을 만듦.
볼륨 그룹( vg ) 안에서 논리 볼륨( lv )을 생성.
파일 시스템을 생성하고 마운트하여 사용.

LVM 유틸리티.
볼륨 관리 도구.
여러 저장 장치에 각각 물리 볼륨을 만들고, 이것을 합쳐 볼륨 그룹( 저장 장치 풀 )을 구축.
볼륨 그룹을 여러 논리 볼륨들로 나누어 사용.

LVM 관련 명령.
pvcreate : 파티션을 초기화하여 물리 볼륨으로 만듦.
pvdisplay : 물리 볼륨의 속성을 출력.
vgcreate : 명령 pvcreate로 만든 블록 디바이스로부터 새로운 볼륨 그룹을 생성.
vgextend : 기존 볼륨 그룹의 크기를 늘리기 위해 물리 볼륨을 추가.
vgdisplay : 볼륨 그룹의 속성을 출력.
lvcreate : 볼륨 그룹에서 새로운 논리 볼륨을 생성.
lvdisplay : 논리 볼륨의 속성을 출력.

LVM 사용 예.
pvcreate /dev/sdb2 : 파티션을 물리 볼륨으로 만듦.
vgcreate testVG /dev/sdb2 /dev/sdb3 : 2개의 물리 볼륨을 testVG라는 볼륨 그룹을 만듦.
lvcreate -n music -L 2Gib testVG : testVG 볼륨 그룹에서 music이라는 2Gib의 논리 볼륨을 만듦.
lvdiplay /dev/testVG/music : 논리 볼륨 music의 속성을 출력.



 # 파일 시스템.

파일 시스템.
정보의 저장과 검색을 위해 저장 장치를 어떻게 구성하고 관리할 것인가에 관한 규칙.
파일에 파일명과 경로를 부여하여 저장이나 검색을 위해 파일을 구분하고 식별하기 위한 방법.
종류에 따라 파티션의 수와 크기, 파일 이름의 길이, 파일의 크기, 성능/보안/유연성 등에 차이가 남.

파일 시스템의 구조.
유닉스 계열의 운영체제에서 사용하는 파일 시스템의 기본 구성요소.

파일 시스템의 구조 - 슈퍼블록.
파일 시스템의 특징을 기록한 블록.
블록의 크기, 전체 블록의 개수, inode 테이블의 크기와 위치, 디스크 블록 맵 등을 저장.
너무 중요해서 여러 장소에 백업을 해 놓는다.

파일 시스템의 구조 - inode 테이블.
inode 리스트라고도 함.
하나의 항목인 inode는 한 개 파일의 이름을 제외한 모든 정보를 가짐.
inode 번호, 파일의 형태, 접근권한, 소유자, 소유 그룹, 수정 시간, 링크 수, 등을 저장.
디렉토리나 특수 파일도 하나의 파일로 간주됨.

파일 시스템의 구조 - 데이터 블록.
일반 파일의 경우 실제 데이터가 저장됨.
디렉토리의 경우 포함된 파일의 이름이 inode 번호와 함께 저장됨.

파일시스템 유형.
ext4 : - 리눅스의 기본 파일 시스템으로 범용 파일 시스템. ( ext2, ext3의 개선된 버전 )
        - 저널링( 기록 )을 통한 신뢰성, 온라인 단편화 제거, 하위 호환성 등의 기능.
iso9960 : CD-ROM과 같은 광학 디스크에서 사용되는 표준 파일 시스템.
vfat : 윈도우 운영체제와 호환되는 파일 시스템으로 USB에서 주로 사용됨.
HFS+ : 매킨토시에서 사용되는 표준 파일 시스템.
Btrfs : 리눅스의 차세대 파일 시스템. ( 복구, 크기조정을 쉽게 하기 위한 기능을 가짐 )
XFS : 고성능으로 대용량 파일을 사용하기 위한 파일 시스템.

mkfs 명령.
파티션이나 논리 볼륨에 리눅스 파일 시스템을 만드는 명령.
형태 : mkfs [-t fs-type] device.
옵션 -t fs-type을 사용하여 파일 시스템의 종류를 지정.
device는 /dev/sdb1 또는 /dev/sdc1과 같은 장치 이름.
예 : /sbin/mkfs.ext4 

fsck 명령.
파일 시스템의 무결성을 검사하고 손상된 파일을 고치는 명령.
마운트되어 있지 않은 파일 시스템을 검사.
문제가 있다면 대화식으로 파일 시스템을 복원.
파일 시스템의 lost+found 디렉토리에 손상된 파일이 남아 있을 수 있음.
형태 : fsck [options] device.
e2fsck와 같은 파일 시스템 고유의 검사 프로그램이 존재할 수 있음. ( ext 고유 검사 )

스왑영역.
특정 파티션이나 파일을 스왑 영역으로 저장하여 사용할 수 있음.
메모리 사용량을 확인하는 free 명령으로 스왑 메모리를 알 수 있음.

파티션을 스왑 영역으로 사용할 때. ( 논리 볼륨 하나를 스왑영역으로 바꿈 )
빈 파티션을 만듦.
mkswap device를 수행하여 스왑 파티션으로 함. ( 리눅스용 스왑 영역으로 지정 )
swapon device를 수행하여 활성화시킴.
/etc/fstab 파일에 기록함.

df 명령. ( disc free )
마운트 되어 있는 파일 시스템의 공간 사용 정보를 보여줌.
형태 : df [options] [names]
-h : 용량의 단위를 KB,MB,GB 단위로 보여줌.
-T : 파일 시스템의 유형을 포함하여 출력함.
-i : inode의 사용량을 보여줌.
예 : df -h

du 명령. ( disc usage )
디렉토리나 특정 파일의 디스크 사용량을 표시하는 명령.
형태 : du [options] [directories]
-a : 디렉토리 외에 파일의 디스크 사용량도 출력함.
-s : 주어진 디렉토리 또는 파일만의 총 사용량을 출력함.
예 : du --max-depth=1 /home.





