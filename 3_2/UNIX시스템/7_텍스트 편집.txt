
 텍스트 편집.



 # 편집기.

리눅스와 텍스트 파일.
리눅스 시스템에서 중요한 설정 정보나 셸 스크립트가 텍스트 파일로 존재함.
텍스트 파일의 장점 : 공유가 쉽고 텍스트 편집기를 이용하여 간단하게 편집할 수 있음.

리눅스 텍스트 편집기의 종류.
gedit : GNOME 테스크톱에서 제공하는 작고 가벼운 편집기.
emacs : 화면 단위 편집기로 다양한 기능을 제공하나 사용법이 어려움.
vi : 유닉스 계열 운영체제에서 가장 보편적인 화면 편집기. ( vim = Vi improved )

vim이 vi와 다른 점.
파일의 구조를 표시하기 위해 컬러를 사용.
마우스 지원, 다중 undo, 다중 탭( 또는 화면 분할 )을 지원.
블록을 선택할 때 비주얼 모드를 지원.

vi 시작하기.
터미널 창의 셸 프롬프트에서 다음을 수행함.
모달 편집기( 실행하면 다른작업 불가 )로 다른 작업은 수행할 수 없다.
형태 : vi [options] [filename]

vi 편집기의 세 가지 모드.
명령 모드 : 커서 이동 , 삭제, 복사, 붙여넣기 등. ( i, a, o, c 를 누르면 입력모드로 바뀜 )
입력 모드 : insert, add, open a lin, change 등. ( ESC를 누르면 명령모드로 바뀜 )
라인 모드 : 저장, 검색, 대치 등. ( ESC를 누르면 명령모드로 바뀜.

vi 종료하기.
ZZ : 변경 내용을 저장하고 종료. ( 명령 모드 )
:q : 변경된 내용이 없는 경우 종료. ( 라인 모드 )
:q! : 저장하지 않고 강제 종료. ( 라인 모드 )
:wq [filename] : 저장하고 종료.
:x [filename] : 변경이 있었다면 저장하고 종료.
:x! [filename] : 위와 같으나 같은 이름의 파일이 있으면 덮어씀.



 # vi로 편집하기.

텍스트 입력.
초기 명령 모드에서 입력 모드로 이동 후 입력이 가능함.
입력 모드일 때는 화면의 하단에 "--끼워넣기--"가 표시됨.
입력 모드에서 ESC누르면 명령모드로 돌아감.

텍스트 입력 명령키.
a : 현재 커서 위치의 오른쪽부터 텍스트를 추가할 수 있음.
A : 현재 라인의 끝에 텍스트를 추가할 수 있음.
i : 현재 커서의 위치부터 텍스트를 삽입할 수 있음.
I : 현재 라인의 처음에 텍스트를 사입할 수 있음.
o : 현재 라인의 아래에 라인이 열리고 텍스트를 추가할 수 있음.
O : 현재 라인의 위에 라인이 열리고 텍스트를 추가할 수 있음.

커서 이동 명령.
명령 모드에서 화살표 키와 pageUp, pageDown 키를 사용할 수 있음.
그 외에도 다양한 키가 존재함.

커서 이동 명령키.
h j k l : 방향키를 의미한다.
Ctrl+f , Ctrl + b : pageUp, pageDown.
w : 다음 단어의 첫 자로 이동.
b : 앞 단어의 첫 자로 이동.
0 : 현재 라인의 첫 칸으로 이동.
$ : 현재 라인의 마지막 칸으로 이동.
20G : 20번째 라인으로 이동.
G : 마지막 라인으로 이동.
5j : 현재 라인에서 아래로 5라인을 이동.

텍스트 삭제 명령.
명령 모드에서 텍스트를 삭제하거나 변경함.
적당한 위치로 커서를 옮긴 후 삭제함.

텍스트 삭제 명령키.
x : 커서 위치의 한 문자를 삭제.
dw : 커서의 위치부터 다음 단어 전까지 삭제.
d$, D : 커서의 위치부터 현재 라인의 끝까지 삭제.
d0 : 커서의 왼쪽부터 현재 라인의 처음까지 삭제.
dd : 현재 라인을 삭제.
dG : 현재 라인부터 파일의 끝까지 삭제.
d20G : 현재 라인부터 라인 번호 20까지 삭제.
3dw : 커서의 위치부터 세 단어를 삭제.
5dd : 현재 라인부터 다섯 라인을 삭제.

텍스트 변경 또는 치환 명령.
대개 일정 부분의 텍스트를 삭제하고 입력 모드로 전환됨.
삭제, 변경 또는 붙여 넣기를 한 후 커서를 이동하고 도트( . ) 명령을 수행하면 앞서 수행한 작업을 반복.

텍스트 변경 명령키.
r : 커서 위치의 한 문자를 대치.
R : 커서의 위치부터 계속 대치할 수 있음. 입력 모드로 전환됨( 수정 )
s, cl : 커서 위치의 문자가 삭제되고 입력 모드로 전환됨( 삽입 )
S, CC : 현재 라인의 존재하는 문자가 삭제되고 현재 라인에서 입력 모드로 전환됨.
cw : 커서 위치부터 단어의 끝까지 삭제되고 입력 모드로 전환됨.
cd : 커서 왼쪽부터 단어의 앞까지 삭제되고 입력 모드로 전환됨.
c) : 커서 위치부터 문장의 끝까지 삭제되고 입력 모드로 전환됨.
c} : 커서 위치부터 문단의 끝까지 삭제되고 입력 모드로 전환됨.

텍스트 복사.
삭제나 변경을 위한 명령 키를 사용할 때 텍스트가 복사됨.
또는 커서를 적당한 위치로 이동한 후 y( yank ) 명령을 사용하여 복사함.

텍스트 붙여 넣기.
P 또는 p 명령을 이용하여 ( 커서의 왼쪽/위 라인 ) 또는 ( 아래 편/ 아래라인 )에 붙여넣기 할 수 있음.

텍스트 복사 명령키.
yy : 현재 라인을 복사.
5yy : 현재 라인부터 다섯 라인을 복사.
yw : 커서의 위치부터 다음 단어의 앞까지 복사.
y$ : 커서의 위치부터 라인의 끝까지 복사.
y0 : 커서 왼쪽부터 라인의 앞까지 복사.
y^ : 위와 같으나 라인 앞의 빈칸은 복사하지 않음.
yG : 현재 라인부터 파일의 끝까지 복사.
y) : 커서의 위치부터 한 문장을 복사.
y} : 커서의 위치부터 한 문단을 복사.

블록 지정하기.
v 또는 V명령을 사용하여 문자 또는 라인 단위로 지정함.
블록을 지정하고 싶은 곳에 커서를 이동하고 화살표를 사용하여 블록을 지정하고 삭제( x ) 또는 복사( y ) 함.
커서를 이동한 후 p 또는 P 명령을 사용하여 붙여 넣기를 할 수 있음.

블록 지정 명령키.
v : 비주얼 모드에서 한 번에 한 문자씩 선택.
V : 비주얼 모드에서 한 번에 한 라인씩 선택.

기타 명령키.
u : 이전 변경 작업을 취소( undo )
Ctrl + r : 앞서 취소했던 작업을 다시 하는 것으로 취소를 취소.
:e! : 마지막으로 저장한 후의 작업을 취소하고 다시 작업.
:n : n번째 라인으로 이동.
J, :j : 현재 라인과 아래 라인을 합침.
:!command : vi를 사용하다 쉘 명령 command를 수행.
:sh : vi를 잠시 빠져나가 쉘 명령을 수행함. 쉘 명령으로 exit를 실행하면 다시 vi로 돌아옴.
:se nu : 화면 좌측에 라인 번호를 표시.
Ctrl+g : 화면 하단에 파일의 이름, 전체 라인 수, 현재 라인의 상대적 위치를 퍼센티지로 표시.
:r filename : 지정된 파일의 내용을 읽어 현재 커서의 아래 줄에 추가.

검색명령.
한 라인에서 검색할 때 명령 모드에서 f를 사용.
예를 들어 fa 명령은 커서 다음 위치부터 a를 찾음.
세미콜론( ; )을 사용하여 검색을 반복.

파일 전체 검색 명령키.
/pattern : 순방향으로 pattern을 검색하여 커서를 이동.
/pattern/ + num : pattern을 검색하고 그 뒤( + ) num번째 라인으로 이동.
?pattern : 역방향으로 pattern을 검색하여 커서를 이동.
?pattern? - num : pattern을 검색하고 그 앞( - ) num번째 라인으로 이동.
n : 이전 검색을 같은 방향으로 반복.
N : 이전 검색을 반대 방향으로 반복.

정규식과 관련된 명령키.
/hello : 순방향으로 단어 hello를 검색하여 커서를 이동.
?goodbye : 역방향으로 단어 goodbye를 검색하고 커서를 이동.
/The.*does : 단어 The를 포함하고 그 이후에 단어 does를 포함하는 라인을 검색. 
?[pP]rint : 단어 print나 Print를 역방향으로 검색함. [ ] 안에 포함하는 문자 중 하나와 매칭.
/. : 점은 ' . ' 하나의 단어를 의미함.
/* :  별 ' * ' 은 0개 이상의 단어를 의미함.

검색과 대치.
문자열을 검색하여 대치하는 기능.
: [g] [address] s / pattern / replacement [/option]
[g][address]는 검색 범위로, %는 전체를 의미한다.
예를 들어 /pine/은 커서 다음으로 오는 pine을 포함하는 한 라인.
g/pine/은 pine을 포함하는 모든 라인을 대상으로 함.
s는 pattern을 찾아 replacement로 대치하라는 연산.
마지막 옵션이 생략되면 검색된 라인에서 첫 번째 패턴만 대치, /g가 사용되면 모든 패턴을 대치.

검색 대치 명령키.
:s/pattern/replacement : 커서가 위치한 라인에서 첫 번째 등장하는 pattern을 replacement로 대치.
:%s/pattern/replacement : 전체 범위의 라인에서 위와 같은 것을 수행. % 대신 1, $를 넣어도 됨.
:%s/pattern/replacement/g : 위와 같으나 등장하는 모든 pattern을 대치.
:1,10s/pattern/replacement/g : 위와 같은나 1 ~10 라인에서 수행됨.



 # 파일 찾기와 문자열 검색.

locate 명령.
문자열 패턴이 기본적으로 /로 시작하는 파일 이름에 포함될 때 해당 파일의 이름을 출력하는 명령.
절대 경로 상의 디렉토리나 파일 이름에 문자열이 포함되면 출력함.
updated 명려엥서 만들어진 데이터베이스에서 검색함.
접근할 수 없는 파일은 출력이 안됨.
옵션 -b를 사용하면 마지막 이름만 검색함. ( locate -b bin : bin으로 끝나는 모든 파일 ) 
find -name bin : 파일이름이 bin인 파일을 검색. ( bin이 들어간 X )
형태 : locate [options] pattern.

find 명령.
검색 위치에서 조건에 맞는 파일을 찾고, 검색된 파일을 대상으로 명령을 수행할 수 있음.
파일의 이름, 소유자, 접근권한, 크기, 수정시간 등의 속성을 조건으로 사용할 수 있음.
형태 : find [pathnames] [expression]
pathname을 지정하지 않으면 현재 디렉토리( 서브 디렉토리 포함 )를 기준으로 함.
expression이 주어지지 않으면 -print가 주어짐.
find /etc -iname '*passwd*' : 이름에 passwd를 포함하는 파일을 찾음.
find ~ | wc -l : 사용자가 가지고 있는 파일의 총 개수를 출력함.

find 명령에서 조건의 지정.
-cmin n : 파일 내용이나 파일 속성의 마지막 수정시간이 정확히 n분인 경우.
-cnewer file : 파일의 내용이나 파일 속서으이 마지막 수정시간이 지정된 file보다 최근인지.
-empty : 파일이 비어 있는 경우.
-name pattern : 파일의 이름이 pattern과 일치하는 경우.
-iname pattern : -name과 같으나 대소문자를 구분하지 않음.
-nouser : 파일이 유효한 사용자에 속해 있지 않은 경우.
-perm mode : 파일의 접근권한이 mode와 같은 경우로 mode는 8진수 표기법이나 기호 로 표시.
-size n : 파일의 크기가 n인 경우. ( h - 512바이트, c - 바이트, k - 킬로바이트 등 )
-type c : 파일의 타입이 c인 경우. ( b - 블록 디바이스, c - 문자 디바이스, d - 디렉토리 등 ) 
-user name : 파일의 소유자가 name인 경우.

file 명령에서 사용되는 액션.
-delete : 파일을 삭제.
-ls : 파일의 정보를 자세히 보여줌.
-print : 경로를 포함하여 파일 이름을 화면에 출력함. ( 기본값 )
-quit : 매칭되는 것이 있다면 종료.
-exec command { } ; : 사용자 정의 액션으로 임의의 command를 수행함.

grep 명령.
파일에서 지정된 문자열 패턴을 포함한 라인을 찾아 출력.
파이프( | )를 사용하여 앞 명령의 결과를 입력으로 받아 검색할 때 grep을 자주 사용함.
형태 : grep [options] pattern [files]

grep 옵션.
-r : 디렉토리가 지정될 때, 포함된 모든 파일을 대상으로 검색함.
-i : 대소문자를 구분하지 않음.
-v : 매칭이 일어나지 않는 라인을 출력함.
ip addr show | grep inet : ip addr 중에 inet이 들어간 라인을 출력.




