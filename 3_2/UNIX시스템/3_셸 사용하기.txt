
 셸 사용하기.



 # 셸.

셸 shell.
명령어 해석기 또는 명령 행 인터페이스. ( CLI ) 
사용자와 커널 사이에서 명령어를 해석하여 처리.
셸 스크립트는 텍스트 파일로, 프로그래밍을 통한 셸 명령의 조합이다.
셸 명령을 사용하면 GUI로는 하기 힘든 다양한 기능을 수행할 수 있음.
셸 명령을 프로그램으로 작성하여 처리할 수도 있음.
로그인을 하면 기본 셸이 주어짐.

셸 사용하기.
터미널에서 로그인을 해야 함.
GNOME 데스크톱에서 터미널 창을 실행시켜 셸을 사용함.
프로그램 -> 시스템 도구 -> 터미널.
여러 터미널 창을 띄어 사용할 수 있음.
셸은 명령 프롬프트와 명령 행을 제공함.
기본적으로 한 라인에 명령을 입력하고 Enter를 쳐 명령을 수행함.
결과가 출력되면 명령 프롬프트가 다시 등장함.
세미콜론 ( ; )을 사용하면 한 라인에 여러 명령을 입력할 수 있음.

셸의 종류.
많은 리눅스 배포판에서 bash를 기본 셸로 사용함. ( Bourne-Again Shell ) 
일반 사용자는 $, root 사용자는 #을 사용함.
셸의 종류에 따라 에일리어스 설정, 초기화 파일, 스크립트 작성, 명령 행 완성 기능 등에 차이가 있음.

bash 셸.
Bourne again Shell로 Bourne 셸의 개선된 버전.
C 셸과 Korn 셸의 유용한 기능을 가져옴.
실행 명령은 /bin/bash.

셸 선택하기.
chsh -s /bin/tcsh : 기본 셸을 변경할 수 있음.
exit, Ctrl+d : 셸을 종료.
Ctrl+alt+f1 : 원래 사용하던 가상 콘솔로 돌아감.
Ctrl+alt+f2~f6 : 가상 콘솔을 사용할 수 있음.
셸 프롬프트에서 셸 프로그램을 실행하면 서브 셸이 실행됨.



 # 셸 명령.

셸 명령의 형식과 실행.
$명령어 옵션 인수. ( 예 : usermod -L jaewui )
명령어는 프로그램의 이름.
가장 간단한 형태의 실행은 명령의 이름만 사용. ( who, date, ls, pwd )

chsh 명령.
기본 셸을 바꾸는 명령.
chsh [options] [username] 
대괄호는 생략 가능.
복수는 여러 개가 가능하다는 의미.

옵션과 인수.
짧은 옵션 ( - ) : ls -lat와 ls -l -a -t는 같은 것이다.
긴 옵션( -- ) : ls --all
인수는 명령의 수행 대상을 지정 : cat -n /etc/passwd, grep "KilDong Hong" /etc/passwd.
옵션도 인수를 가질 수 있음 : chsh -s /bin/sh kdhong, chsh --shell=/bin/bash kdong.

명령어의 종류.
에일리어스 : alias 명령을 사용하여 만든 명령의 별칭.
셸 예약어 : 예약된 단어로 do, while, case 등.
함수 : 셸에서 수행되는 함수의 정의.
내장 명령 : 셸 내부에 존재하는 명령으로 cd, echo, pwd 등. ( help 내장명령 : 내장명령을 설명 )
일반 명령 : 실행 파일이 존재하는 명령.

환경변수.
PATH에 설정된 경로 중에 실행 파일이 존재하면 이름만으로 실행이 가능.
PATH에 설정되어 있지 않으면 절대 경로를 사용해야 함.
현재 디렉토리 (.)는 보통 PATH에 포함되어 있지 않음.
echo $PATH로 저장된 경로를 확인할 수 있음.

alias 명령.
자주 사용되는 명령의 단축 명령을 만드는 명령.
계속 유지하려면 셸의 환경 설정 파일에 기록해 두어야 함.
예 : alias rm="rm -l"

type 명령.
명령이 어떻게 해석되는지 알려 주는 명령.
예 : type cd

which 명령.
실행 프로그램을 환경변수 PATH를 기초로 찾아 경로를 출력함.
예 : which rm.

whereis 명령.
실행 프로그램 환경변수 PATH를 기초로 경로와 소스파일 경로도 출력함.
예 : whereis rm.

man 명령.
메뉴얼 페이지를 보여줌.
명령의 사용법이나 설정 파일 등에 관한 온라인 도움말을 제공.
예 : man passwd 또는 man 5 passwd



 # 명령 히스토리.

history 명령.
이전에 수행했던 명령 행의 목록을 불러옴.
예 : history 또는 history 10.

히스토리 기능을 이용하여 명령을 실행.
이전에 수행했던 명령을 이용하여 명령을 수행할 수 있음.
!! : 직전 명령을 불러옴.
!n : 히스토리 목록에서 해당 명령을 불러옴.
!string : 지정된 문자열로 시작하는 최근 명령을 불러옴.
방향키 위, 아래 : 누를 때마다 직전 또는 직후 명령을 불러옴.

명령 행 완성 기능.
일부만 입력하고 나머지를 자동으로 완성하는 기능.
처음 몇 자만 입력한 후, tab 키를 누르면 실행됨.



 # 명령의 연결과 확장.

특수문자.
\ : 특수 문자의 기능을 제거하는 이스케이프 문자 또는 긴 명령 행을 분리할 때 사용.
~ : ~ 또는 ~username은 사용자의 홈 디렉토리를 의미.
. : 현재 작업 디렉토리를 표시 또는 명령 행의 맨 앞에서 쉘 스크립트 실행을 source 명령.
.. : 현재 디렉토리의 부모 디렉토리.
# : #문자의 뒤에 나타나는 문자를 주석으로 처리.
$ : "$변수" 는 변수의 값을 추출.
& : 명령&는 명령을 백그라운드로 실행시킴.
* : 파일 이름에서 사용할 때 0개 이상의 임의 문자열과 대응됨.
? : 파일 이름에서 사용할 때 1개 문자와 대응됨.
| : 앞 명령의 출력을 다음 명령의 입력으로 연결시킴.
< 또는 > : 입출력 리다이렉션에서, 즉 파일로부터 입력받을 때 또는 파일로 추력할 때 사용.
>> : 표준 출력을 파일의 끝에 덧붙일 때 사용.
! : 명령 히스토리 기능을 이용할 때 사용. 

파이프.
앞 명령의 출력 결과를 다음 명령의 입력으로 연결.
예 : 명령1 | 명령2 

입출력 리다이렉션.
명령 < 파일 : 명령 수행에 필요한 표준 입력 대신에 파일로부터 얻음. ( sort < /etc/passwd )
명령 > 파일 : 명령 수행의 결과를 표준 출력으로 보내지 않고 파일에 기록함. ( grep typedef /ur
명령2 > 파일 : 명령 수행 중. ( ls 2>>error.txt )

명령 치환.
명령을 수행할 때, 명령의 인수로서 다른 명령의 결과를 사용.
$(command) 또는 `command` ( 역 따옴표( ` ` )를 사용함 )
예 : ls -l $( which passwd ) == ls -l( /usr/bin/passpw ) ; 

인용 부호.
빈칸을 포함하는 문자열을 1개의 인수로 사용할 때 인용 부호가 필요함.
작은 따옴표( ' ' )는 특수 문자의 의미를 제거함.
큰 따옴표( " " )는 $, ` ` , \ , ! 를 해석하여 확장함.



 # 셸 변수.

셸 변수. ( 소문자 사용 )
셸 변수는 셸의 환경을 설정하기 위한 값을 저장.
모든 변수와 값을 출력하기 위해 set 명령을 사용.
현재 셸에서만 사용이 가능하고 서브 셸로는 전달되지 않음. ( 지역변수 )

환경 변수. ( 대문자 사용 )
현재 셸뿐만 아니라 서브 셸로도 전달. ( 전역 변수 )
보통 변수 이름으로 대문자를 사용함.
터미널 창을 열어 쉘을 시작하면 이미 많은 환경 변수가 설정되어 있음.
모든 환경 변수와 값을 출력하기 위해 printenv 명령을 사용.

변수 설정과 환경 변수를 만드는 방법.
변수 = 값 ( 변수 설정 )
export 변수. ( 환경변수로 만듬 )

특정 환경 변수의 값을 확인하는 방법.
printenv 변수.
echo $변수는 모든 종류의 변수 값을 확인할 수 있음.

자주 사용되는 환경 변수.
HISTSIZE : 1개 셸에서 저장되는 명령 히스토리 목록의 최대 개수로 기본 값은 1000이다.
HOME : 홈 디렉토리.
MAIL : 사용자의 메일박스에 해당하는 파일로 보통 /var/spool/mail/username
PATH : 명령을 수행할 때 실행 파일을 찾기 위한 디렉토리 목록.
PS1 : 쉘 프롬프트를 표시하기 위한 문자열.
SHELL : 사용 중인 기본 셸.
PWD : 현재 작업 디렉토리.
USER : 현재 사용자 계정.

로그인과 셸의 환경 설정 파일.
로그인할 때 또는 셸을 시작할 때 자동으로 실행되는 명령을 저장한 파일.
시스템 환경 설정 파일과 사용자 환경 설정 파일이 있음.
셸의 종류에 따라 다른 이름의 파일을 사용함.
bash 셸의 경우 다음과 같다.
/etc/profile : 모든 사용자에게 적용. 로그인할 때 가장 먼저 수행. 전역 환경 변수 설정.
~/.bash_profile : 로그인할 때 수행되며 개별 사용자에게 적용됨. ( 1번 변수를 오버라이딩 가능 )
~/.bashrc : 쉘을 시작할 때마다 수행되며 개별 사용자에게 적용됨. ( 4번 변수를 오버라이딩 가능 )
/etc/bashrc : 모든 사용자에게 적용. 쉘을 시작할 때마다 수행됨. ( PS1, 에일리어스, 함수 등을 설정 )
~/.bash_logout : 로그아웃을 수행할 때 실행되는 스크립트 파일.





