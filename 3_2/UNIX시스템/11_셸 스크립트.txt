
 셸 스크립트.



 # 셸 스크립트 개요.

셸 스크립트.
셸 명령어의 집합으로 이루어진 실행 가능한 텍스트 파일.
셸이 파일의 내용을 읽어 처리함.
선택/반복 등의 프로그래밍 구조를 사용할 수 있음.
긴 작업, 반복적으로 일어나는 작업을 셸 스크립트로 작성할 수 있음.
셸 스크립트를 새로운 명령어처럼 사용할 수 있음.

예.
~/.bash_profile, ~/.bashrc 등의 셸 초기화 스크립트.
디렉토리 /etc/rc.d/init.d/에 존재하는 시스템 초기화 스크립트.

셸 스크립트 실행 방법 - bash script_file.
스크립트 파일에 실행 권한을 추가할 필요가 없다.
명령 행에서 script_file 다음에 인수를 추가할 수 있음. ( 모두 마찬가지 )
서브 셸을 새로 생성하여 스크립트를 실행함.

셸 스크립트 실행 방법 - ./script_file
스크립트 파일에 실행 권한을 추가해야 함.
PATH 환경 변수에 설정된 디렉토리에서 스크립트 파일을 찾음.
스크립트 파일의 첫 행에서 #! 다음에 해석기(/bin/bash)를 지정.
서브 셸을 새로 생성하여 스크립트를 실행함.

셸 스크립트 실행 방법 - source script_file 또는 . script_file.
source는 셸의 내장 명령이며 현재 셸에서 스크립트 파일을 실행함.

셸 스크립트 문법.
#으로 시작하는 단어와 (같은 행에서) 이후에 나오는 내용은 주석으로 처리됨.
$0은 스크립트 파일의 이름으로 확장됨.
$1은 첫 번째 인수, $2는 두 번째 인수로 확장됨.
스크립트가 복잡하다면 적절한 echo 명령을 넣는 것이 좋음.
변수=값을 사용하여 변수에 값을 지정하고 $변수를 사용하여 값을 추출할 수 있음.
참고 - bash -x script_file과 같이 실행하면 수행되는 명령을 확인할 수 있음.



 # 변수의 사용.

셀 스크립트에서 변수의 사용.
선언 없이 변수를 사용할 수 있음. ( MYCOLOR = blue 또는 echo $PATH )
변수의 값은 기본적으로 문자열로 취급. ( 연산이 필요하고, 변환이 가능한 경우 정수로 다루어짐 )

변수의 이름 작명 규칙.
대소문자의 규칙.
영문자, 숫자, 언더스코어(_) 문자로 구성.
첫 자는 숫자가 될 수 없음.

명령 행 인수.
셸이 스크립트를 처리할 때 사용되는 인수.
사용자가 스크립트 실행에 필욯나 입력값을 주어야 함.
$0은 스크립트 파일의 이름으로 확장됨.
나머지를 위치 매개변수( positional parameter )라 하며 $1, $2, $3 등은 이러한 인수를 의미함.

특별한 매개 변수.
명령 행 인수와 관계가 있는 특별한 변수.
변수의 값을 참조만 할 수 있음.

특수 매개변수.
$* : "$1 $2 $3 ..." 와 같다. ( $0을 제외한 모든 매개변수 )
$@ : 여러 개별 큰 따옴표, "$1", "$2" , "$3", "..." 와 같다.
$$ : 쉘으 프로세스 ID( PID )로 확장된다.
$# : 위치 매개변수의 개수로 확장된다.
$? : 최근에 실행된 포어그라운드 명령의 종료 상태값으로 확장된다. 성공적으로 종료되면 0.
$! : 최근 실행된 백그라운드 명령의 프로세스 ID로 확장된다.

read 명령.
키보드로부터 한 라인을 읽은 후 , 단어를 상응하는 변수에 저장함.
대화식으로 스크립트를 실행시킬 수 있음.

read [options] [variable...]
첫 번째 변수에 첫 번째 단어를, 두 번째 변수에 두 번재 단어를 저장.
마지막 변수에 나머지 모두를 저장.
남아 있는 변수가 있음녀 빈 문자열이 됨.
변수의 이름을 사용하지 않으면 셸 변수 REPLY에 저장됨.
옵션 -p prompt는 입력을 위한 프롬프트를 지정함.
 


 # 함수의 사용.

함수.
함수는 셸 스크립트에서 반복적으로 사용되는 명령의 묶음.
셸 스크립트 파일에 함수를 정의할 수 있음.
정의되어 있는 함수를 호출하여 사용함.

함수의 사용(호출) 방법.
함수가 정의된 스크립트 파일에서 함수를 호출하여 사용할 수 있음.
함수가 정의된 스크립트 파일을 실행하면 셸 환경에 함수 정의가 추가됨.
함수 정의가 추가되면 같은 셸에서 함수 이름을 셸 명령어처럼 사용.
source 명령이나 도트(.) 명령으로 셸 스크립트를 실행하면 함수 정의가 현재 셸 환경에 추가됨.

함수 정의 방법.
function name { 실행할내용... return 값 } 
name( ) { 실행할내용... return 값 } 
함수 정의를 항상 사용하려면 .bashrc에 넣는 것이 좋음.

함수 사용 방법.
. 셸 스크립트이름.sh ( 내가 원하는 함수를 가진 셸 스크립트 )
FunctionName : 함수를 호출한다.



