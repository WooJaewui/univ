
 DFA와 동치관계.



 # DFA의 구현.

DFA 사용법.
DFA를 전이함수표로 만들어서 고급 프로그램에서 2차원 배열로 구현.
터미널 기호(정규 표현)를 DFA에 넣었을 때 마지막 터미널 기호가 종료 상태면 true, 아니면 false.

DFA의 구현.
N차원 배열을 만든다. ( 전이함수표 )
initailize라는 함수를 구현해서 DFA실행시 N차원 배열의 값들을 넣어준다.
accept 함수는 deltabar 함수의 결과값과 finalstate가 같은지 확인해서 boolean을 리턴한다.
deltabar 함수는 배열[ 이전상태, 입력문자 ]를 반복하여 마지막 입력문자의 상태값을 구해서 리턴한다.



 # DFA의 상태 최소화.

동치류.
최종상태를 기준으로 최종상태로 가는 상태, 최종상태로 가는 상태로 가능 상태로 같은 분류끼리 그룹짓는 방식.
상태를 그룹지어 상태를 최소화하여 경우의 수를 줄일 수 있다.



 # 정규문법 -> 정규표현.

동치관계.
정규문법 == 정규표현 == 유한오토마타 => 어휘분석기.
LEX라는 자동 소프트웨어를 사용하면 정규표현을 넣어주면 어휘분석기로 구현된다.

정규문법 -> 정규표현.
터미널끼리 뭉치면 터미널이다라는 속성을 생각하자.
논터미널이 2개인 식에서 (a+b)A + b 를 ( a + b ) *** 로 바꿔서 식을 정리하자.



 # 정규표현 -> 유한오토마타.

정규표현.
a**+ : 앱실론이 없는 a의 무한반복.
a*** : 앱실론을 포함하는 a의 무한반복.
( a + b ) *** : 앱실론을 포함하는 a 또는 b의 무한반복. ( a를 넣어도 A, b를 넣어도 A )

유한오토마타로 표현.
abcdf와 같은 정규표현이 있으면, 논터미널 값에 대한 상태를 표현해준다.



 # 유한오토마타 -> 정규문법.

유한오토마타 -> 정규문법.
A -> a -> C = A -> aC로 변환.
A -> a -> A = A -> aA 또는 A -> 앱실론.
상태를 논터미널로 인식하여 정규문법으로 표현.



 # 정리.

컴파일과정.
프로그램 -> 어휘분석기 -> 구문분석기 -> 의미분석 -> 중간코드 -> 최적화 -> 목적코드.






