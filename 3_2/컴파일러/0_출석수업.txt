
 컴파일러 출석수업.



 # 1교시.

설명.
고급언어를 기계어로 번역하는 소프트웨어이다.

과목 개설 이유.
컴파일러 구현의 어려움. ( 정확성 )

번역기의 종류.
어셈블러 : 어셈블리어를 기계어로 번역하는 번역기.
컴파일러 : 고급언어를 저급언어로 번역하는 번역기.
인터프리터 : 고급언어를 바로 실행하는 번역기.
프리프로세서 : 고급언어를 다른 고급언어로 번역하는 번역기.
High ( 인간에 가깝다 ) <-> Low ( 기계에 가깝다 )

연산 레지스터.
어셈블리어를 통한 연산과정을 진행하는 장소이다.

어셈블리어.
LOAD : DATA를 연산 레이스터로 불러온다.
STORE : 연산 레지스터의 DATA를 저장하기.
MULT : 곱하기.
DIV : 나누기.
ADD : 더하기.

어셈블리어 특징.
실행 속도가 고급 언어에 비해 굉장히 빠르다. ( Low 할수록 빠르다 )
하드웨어의 발달로 배우기 어려운 Low언어보다 High언어를 사용한다.

컴파일러의 논리적 구조.
프로그램 : ABC := E * 3.14 + ABC / E ;
어휘분석 : 하나하나의 요서를 분석한다.
구문분석 : 식별자 := 식별자 * 숫자 + 식별자 / 식별자 ;
의미분석 : 기억장소 <- 곱셈 + 나눗셈 결과.
목적코드 생성.

논리적 구조 6단계.
어휘분석. ( LEX )
구문분석. ( YACC )
의미분석.
중간코드 : 최적화를 위한 코드.
최적화 : 수행시간, 기억공간 최소화.
목적코드 생성.



 # 2교시.

컴파일러 식별자 형식.
첫 글자는 영문자.
영문자 + 숫자.
8자 이내. ( 요즘은 더 길어도 허용 )

BNF Backus Normal Form 표기법. 
<식별자> ::= <영문자> {<영숫자>}7 0
<영숫자> ::= <영문자> | <숫자>
<영문자> ::= a | b | c ... | y | z
<숫자> ::= 0 | 1 | 2 ... 8 | 9 
::=  는 '같다' 을 의미이다.
{ } 는 '반복' 을 의미한다.
| 는 '또는' 을 의미한다.

예 ) abc 생성하기.
<식별자> -> <영문자> {<영숫자>}7 0
             -> <영문자> {<영문자> | <숫자> }7 0
             -> <영문자> {<영문자>}2
             -> <영문자><영문자><영문자>
             -> abc. ( YES, TRUE, accept )

예) a5c 유도하기.
<식별자> -> <영문자> {<영숫자>}7 0
             -> <영문자> {<숫자> | <영문자> }2
             -> <영문자><숫자><영문자>
	 -> a5c. ( YES, TRUE, accept )

표기법의 변경.
<식별자> : id ( identifier )
<숫자> : d ( digit )
<영문자> : l ( letter )
::= :  -> 
G : Grammar.
S : Start.

기호 설명.
S는 맨마지막에 위치하고 시작을 의미한다. ( S라고 쓰지 않고 A라고 써도 시작을 의미한다 )
P는 맨마지막에서 2번째에 위치하고 과정을 의미한다.
( G를 생략하면 자동으로 처음나온 변수가 시작을 의미한다 )
S -> aS | aB
S -> aS , S -> aB 으로 나눠쓸 수 있다.

기호 분류.
terminal : 끝나는 기호 ( 소문자, 숫자 )
Non terminal : 끝나지 않는 기호 ( 대문자 )

유한오토마타 ( DFA )
규칙에 따라 true, false를 분별해주는 어휘분석기.



 # 3교시.

구문분석 예 ) id + id * id 올바른 문장인가 ?
E -> E + E | E * E | id

E -> E + E 
  -> id + E * E
  -> id + id * id ( YES, TRUE, accept ) 

TOP-DOWN 구문분석.
위에서 아래로 구문을 분석하는 방법.
왼쪽을 먼저 유도한다 - 좌단유도 

Bottom-UP 구문분석.
아래에서 위로( reduce ) 구문을 분석하는 방법. ( 거의 대부분 이 방식을 사용 )
오른쪽을 먼저 유도한다 - 우단유도

shift-reduce 구문분석.
단계, 스택, 입력, 구문분석행동으로 나누어서 구문분석을 한다.
단계 : 0,1,2,3,4.. 단계를 적는다.
스택 : shift된 데이터를 저장하는 곳.
입력 : shift되기 전에 전체 데이터가 저장된 곳.
구문분석행동 : shift 또는 reduce 행동을 적어준다. 
출발기호가 나왔을 때 accept된 것이다.




