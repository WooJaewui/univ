
 유한 오토마타.



 # 유한 오토마타.

어휘분석 과정.
정규문법 -> 정규표현 -> 유한오토마타 

유한 오토마타.
문자열( 어휘, 단어 )를 받아들여서 올바른 문자열이 맞는지 Yes 또는 No로 응답한다.

식별자.
첫자는 영자.
다음부터 영자 또는 숫자의 조합.

유한 오토마타 기호.
-> : 전이를 의미.
동그라미 : 상태.
기호 : -> 위에 적는다.

b7a8 식별자 확인. ( 유한오토마타 )
q0 -> b -> q1 -> 7 -> q1 -> a -> q1 -> 8 -> q1( 동그라미 2개 - 종료 )
yes ( 식별자가 맞다 )

b=7 식별자 확인. ( 유한 오토마타 )
q0 -> q1 -> = -> ( 더이상 진행 안됨 )
false ( 식별자가 아니다 )

유한 오토마타 형식적 표현 기호.
Q : 상태.
∑ : 입력기호. ( 시그마 )
∂ : 전이함수. ( 델타 )
q0 : 시작상태. 
F : 종료상태. ( 동그라미 2개 )



 # 정규표현과 유한오토마타.

정규표현.
터미널기호들의 집합.

정규표현의 유한오토마타.
q0 -> 터미널기호( 정규표현 ) -> F.
q0, F는 아무문자나 사용해도 상관없다.
a+ = A -> A ( 무한반복 가능 - 앱시론이 없다 - A에 동그라미 1개 )
a*** = A -> A ( 무한반복 가능 - 앱실론이 있다 - A에 동그라미 2개 ) 

예 - ( a + b ) *** abb
q0 -> A -> a | b -> A -> a -> B -> b -> C -> b -> D ( 동그라미 2개 )
( a + b ) *** 뒤에 다른 터미널기호가 있으면 앱실론이 나올 수 없다. ( 동그라미 1개로 표현 )

( a + b )+
0 -> 앱실론 -> 1 -> 앱실론 -> 2 -> a -> 3 -> 앱실론 -> 6
0 -> 앱실론 -> 1 -> 앱실론 -> 4 -> b -> 5 -> 앱실론 -> 6
6 -> 1

( a + b ) ***
0 -> 7 ( 앱실론 )
0 -> 앱실론 -> 1 -> 앱실론 -> 2 -> a -> 3 -> 앱실론 -> 6
0 -> 앱실론 -> 1 -> 앱실론 -> 4 -> b -> 5 -> 앱실론 -> 6
6 -> 1 
앱실론을 생략해서 기호로 표현 가능.



 # NFA와 DFA의 동치관계.

결정적 유한오토마타 Deterministic Finite Automata.
하나의 입력기호에 대하여 한 개의 상태 전이만 가능.
프로그램 구현하기 쉽다.

비결정적 유한오토마타 Non Deterministic Finite Automata.
하나의 입력기호에 대하여 두 개 이상의 상태 전이. ( 앱실론-전이가 있다 )
구현이 복잡하고 성능저하. ( 결정적 오토마타로 바꿔준다 )

DFA - 식별자.
q0 -> a -> q1 -> b -> q1 -> c -> q1 -> ... 

NFA - 식별자.
q0 -> 1 -> q1 -> 2 -> q1 -> ...
q0 -> 1 -> q2 -> 2 -> q2 -> ...
q0 -> 1 -> q0 -> 2 -> q0 -> ...

DFA와 NFA의 동치 관계.
DFA와 NFA는 서로가 동등하다.
DFA는 항상 NFA에 포함된다.
NFA가 DFA에 포함되는 것을 증명하면 둘은 동등하다.



 # 앱실론전이 NFA -> DFA로 변경.

앱실론-closure.
앱실론만으로 도달할 수 있는 상태들의 집합을 의미함.

(a+b)***abb 앱실론-closure 예시.
앱실론-closure(0) = { 0,1,2,3,4,5 } 
앱실론-closure(1) = { 1,2,4 } 
앱실론-closure(3) = { 1,2,3,4,6,7,8 }
앱시론-closure(5) = { 5,6,7,8,1,2,4, }
앱실론-closure(0,9) = 앱실론-closure(0) ∪ 앱실론-closure(9)

앱실론-closure 활용하기.
앱실론-closure(0) = A.
A에서 갈 수 있는 터미널기호를 구한다. ( a, b )
앱실론-closure(3,9) = B
앱실론-clsure(5) = C
B에서 갈 수 있는 터미널기호를 구한다. ( a, b )
앱실론-closure(3,9) = B
앱실론-closure(5,11) = D
C에서 갈 수 있는 터미널기호를 구한다. ( a, b )
앱실론-closure( 3, 9 ) = B
앱실론-closure( 5 ) = C
D에서 갈 수 있는 터미널기호를 구한다. ( a, b )
앱실론-closure( 3, 9 ) = B
앱실론-closure( 5, 13) = E 
E에서 갈 수 있는 터미널기호를 구한다. ( a, b )
앱실론-closure( 3, 9 ) = B
앱실론-closure( 5 ) = C 
새로운 상태가 나오지 않으면 종료된다. ( E - 종료상태 ) 



 # 두 개 이상의 상태전이 NFA.

상태 구하기.
∂( [q0, q1], 0 ) = { q0, q1 } -> [ q0, q1 ] ( q0 -> 0 -> 상태값 , q1 -> 0 -> 상태값 )
∂( [q0, q1], 1 ) = { q0, q1 } -> [ q0, q1 ] ( q0 -> 1 -> 상태값 , q1 -> 1 -> 상태값 )

주의사항.
시작상태 A에서 갈 수 없는 상태는 삭제할 수 있다. ( q0에서 갈 수 없는 상태 )



 # 정리.

유한오토마타.
p0( 처음상태 )에서 어떠한 정규표현이 오면 전이에 의해 새로운 상태로 변하는 상태기계이다.

어휘분석기 구현하기.
정규문법을 정규표현( 터미널 기호 )으로 바꾸고 유한오토마타를 통해 정규표현의 상태를 확인한다.
DFA와 NFA는 어휘분석기이다.





