
 구문분석 개요.



 # 구문분석의 종류 / 역사.

Top-Down 방법.
시작기호 -> 문장을 생성.

Bottom-Up 방식.
문장 -> 시작기호.
Top-Down 방식보다 장점이 많아서 더 많이 사용한다.



 # Top - Down 구문분석.

조건.
id + id * id.

문법  
E -> E + E
E -> E * E 
E -> id

유도 과정.
E -> E + E
  -> id + E * E
  -> id + id * E
  -> id + id * id

Top - Down 구문분석.
좌단 유도 방식을 사용한다.
모호성, Backtracking, Left -recusion 등이 존재하기 때문에 Top - Down 방식은 많이 사용하지 않는다.



 # Bottom - Up 구문분석.

조건.
id + id * id

문법.
E -> E + E
E -> E * E 
E -> id

유도 과정.
id + id * id
-> E + id * id
-> E + E * id
-> E + E * E
-> E + E
-> E ( 시작기호 )

Bottom - Up 구문분석.
아래에서 위로 올라가면서 분석을 하는 방식이다.
왼쪽을 먼저 reduce하기 때문에 우단유도과정이다. ( Top에서부터 생각하면 우단유도 )
reduce 할 수 있는 기호를 handle이라고 부르고 구문분석에서 가장 중요한 기호이다.



 # Shift - Reduce 구문분석. 

Shift-Reduce 구문분석.
Bottom-Up구문분석 중 한 방식이다.
단계, 스택, 입력, 구문분석행동을 표로 나타내서 구문분석을 실행하는 방식.
0단계에서 스택의 값은 $이다.
입력된 값을 스택으로 shift, reduce 하면서 구문분석을 하는 방식. ( 구문분석행동에 표시 )
입력값이 $가 된 후에 스택의 값을 모두 reduce하면 구문분석의 결과를 출력.



 # FIRST.

FIRST.
FIRST(a) = { x ∈ Vt | a => xB , B ∈ V*** }
첫번째 나오는 터미널 기호들.
A -> * -> 앱실론이면 A는 nullable하다.

FIRST 계산방법.
FIRST가 터미널기호면 {x} ∈ FIRST(x)이다. 예 - ( , id, 앱실론 등.
FIRST가 논터미널기호면 논터미널기호의 결과값중 첫번째 터미널기호를 의미한다.

ring sum.
앞에 기호1이 앱실론이라면 기호2를 구해서 합집합을 구하라.
앞에 기호1이 앱실론이 아니라면 기호1의 FIRST(기호1)가 FIRST가 된다.
FIRST( 기호1기호2 ) = ( FIRST(기호1) + FIRST(기호2) )



 # FOLLOW.

FOLLOW.
A 뒤에 나오는 터미널 기호들. ( 앱실론은 제외 )
A 뒤를 구하기 위해 A뒤에 기호들을 검사한다.
$ : 입력 문자열의 끝. 

FOLLOW(A) 계산방법.
A가 출발기호면 $는 포함된다.
B -> aA이면 FOLLOW(A)는 FOLLOW(B)를 포함한다.
B -> aAb이면 FOLLOW(A)는 FIRST(b)를 포함한다.




