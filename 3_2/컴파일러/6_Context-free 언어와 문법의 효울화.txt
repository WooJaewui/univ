
 Context-free 언어와 문법의 효울화.



 # Context-free 언어.

Context-free 
type2단계 방법이다.
A -> t : 왼쪽은 논터미널기호 오른쪽은 아무 값이나 사용가능.

Context-Free Grammar 구문분석. ( CFG ) 
Context-free언어를 활용해서 구문을 분석하는 방법.

정규언어. ( 어휘 )
IF, A , B, THEN , ... 등의 어휘들로 나눔.

Context-Free 언어. ( 문장 )
IF - THEN - ELSE 처럼 문장들로 나눔.



 # 유도트리 derivation tree.

좌단유도.
논터미널 기호중에 왼쪽 기호를 먼저 유도하는 방식.
Top-Down 구문분석과 관계가 있다.

우단유도.
터미널 기호중에 오른쪽 기호를 먼저 유도하는 방식.
Bottom-up 구문분석과 관계가 있다. ( reduce )

Top-Down.
논터미널과 터미널이 합쳐진 기호에서 터미널 기호로 만드는 방식.

Bottom-up.
터미널 기호를 논터미널 + 터미널 기호로 만드는 방식. ( reduce )
마지막에 시작기호가 나오면 끝난다.



 # 모호성.

모호성.
Bottom-up 유도할 때 시작기호 나오는 방법이 여러개 나오는 상황을 의미한다.
유도 과정이 여러개이기 때문에 컴파일러가 모호함을 가지가 된다.

모호하지 않은 문법 만들어주기.
연산자의 우선순위를 부여한다. ( 우선순위가 같은 연산자를 논터미널로 묶어줌 )
결합법칙을 통해 묶어준다. 

모호성의 문제점.
컴파일러의 성능이 떨어지게 된다.



 # 불필요한 생성규칙 제거.

불필요한 생성규칙 제거.
1. 터미널 기호를 생성할 수 없는 논터미널 기호.
2. 시작 기호로부터 도달 불가능한 기호.
두 조건에 해당되는 경우 제거한다.



 # 앱실론- 생성규칙의 제거.

앱실론-free 문법.
1. 앱실론- 생성규칙을 갖지 않는다.
2. 시작기호 S -> 앱실론인 경우, 생성규칙의 오른쪽에 S가 없다.

앱실론-free 예시.
S -> aSbS
S -> bSaS
S -> 앱실론
===== 정리 =======
S ->aSbS | bSaS
S -> aSb | abS | ab | bSa | baS | ba 



 # 단일 생성규칙 제거.

단일 생성규칙의 문제점.
불필요한 유도과정으로 효율저하.

단일 생성 규칙 예시.
E -> E + T | T 
T -> T * F | ( E ) | a
F -> ( E ) | a 
===== 정리 =====
E -> E + T | T * F | ( E ) | a 
F -> ( E ) | a 



 # Backtracking과 Left - factoring.

Backtracking.
A -> a | ab 와 같이 조건이 두개가 있을 때 a를 먼저 한 후 ab를 하려면 Backgracking이 발생함.
문제점 : 컴파일러가 다시 돌아가서 연산해야되는 성능이 떨어짐.

Left-factoring.
A -> a | ab에서 공통되는 prefix를 묶어준다.
===== 수정 =====
A -> aB
B -> 앱실론 | b 로 나눠준다.



 # Left - recursion 제거.

Left - recursion. ( 무한 루프 )
S -> S + t | t 일 때 연산이 계속 S -> S부터 만나서 무한루프에 빠진다. ( 논터미널을 뒤로 정리 )
==== 수정1 ====
S -> t + S | t 
==== 수정2 ====
S -> tS'
S' -> +TS' | 앱실론

간접 Left - recursion.
S -> S + t | t 처럼 한 눈에 보이게 아니라 전이 후에 결과가 S -> S가 나오는 무한루프를 의미한다.

간접 Left - recursion 제거 예시.
S -> Aa | b 
A -> Ac | Sd | e
==== 수정 ====
A -> bdA' | eA' ( 종료 값으로 정리 )
A' -> cA'  | 앱실론 ( 반복되는 기호를 논터미널로 묶어줌 )



 # Push - down automata PDA.

PDA 정의.
Context-free언어를 분석하는 오토마타. ( 구문분석 오토마타 )

PDA 용어.
Q : 상태들의 유한집합.
∑ : 입력 기호들의 유한집합.
T : 스택 기호들의 유한집합.
q0 : 시작상태.
z0 : 스택의 시작기호.
F : 종결상태의 집합.
∂ : 사상함수.



