
 제어장치.



 # 마이크로명령어의 형식.

마이크로 명령어.
마이크로프로그램에 의한 제어방식에서 제어기억장치에 있는 제어단어의 내역.

마이크로명려어의 구성내역 ( 26비트의 예 )
A필드 : 처리장치의 레지스터 중 하나의 출발 레지스터 선택. ( 1 ~ 3비트 )
B필드 : 처리장치의 레지스터 중 다른 하나의 출발 레지스터 선택. ( 4 ~ 6비트 )
D필드 : 처리장치의 레지스터 중 도착 레지스터 선택. ( 7 ~ 9비트 )
F필드 : 처리장치의 ALU 연산 선택. ( 10 ~ 13비트 )
H필드 : 처리장치의 시프트 연산 선택. ( 14 ~ 16비트 )
MUX 1필드 : 0과 1로서 내부와 외부 주소를 선택. ( 17비트 )
MUX 2필드 : 상태비트의 값에 따라 CAR을 구동. ( 18 ~ 20비트 )
ADRS 필드 : ROM의 2진 번지에 해당하는 10진 주소. ( 21 ~ 26비트 )

MUX 2의 선택기능.
000 : NEXT - CAR을 증가. ( 다음 주소로 간다 )
001 : LAD - CAR에 주소를 적재. ( 무조건 분기 )
010 : LC - 캐리가 있으면 적재 ( C = 1이면 분기 )
011 : LNC - 캐리가 없으면 적재 ( C = 0이면 분기 )
100 : LZ - 제로면 적재 ( Z = 1이면 분기 )
101 : LNZ - 제로가 아님녀 적재 ( Z = 0이면 분기 )
110 : LS - 부호가 바뀌었으면 적재 ( S = 1이면 분기 )
111 : LV - 범람이 발생했으면 적재 ( V = 1이면 분기 )



 # 마이크로프로그램의 작성.

마이크로프로그램.
제어기억장치에 저장된 일련의 마이크로명령어들의 집합. ( 마이크로프로그램 루틴 )
이러한 마이크로프로그램을 이용하여 제어장치를 구현. ( 마이크로프로그램에 의한 제어장치 )

마이크로프로그램의 개념.
제어장치 설계를 위한 시스템적인 접근과정.
마이크로명령어 형식을 설정하면 마이크로프로그램의 작성과정은 컴퓨터의 프로그램 작성과정과 유사.
이러한 이유로 펌웨어라고도 함. ( 휘발성을 가지지 않는다 - RAM과 반대 )

하드웨어에 의한 제어장치.
주어진 시간에 처리장치에서 수행할 마이크로연산을 결정해주는 제어상태를 갖는 순서회로.

제어장치의 설계.
입력신호들에 따라 출력신호들을 발생하도록 내부논리 설계.
각 제어신호에 대한 부울 표현식이 입력함수로 구현.
결국 제어장치의 설계는 순서회로의 설계이다.
일반적으로 제어순서의 상태도를 이용하여 설계.

제어장치의 구현 방법.
상태 플립-플롭을 이용한 제어방식.
순차 레지스터와 디코더를 이용한 제어방식.

상태 플립 플롭을 이용한 제어.
동작원리 : 외부입력에 의한 결정논리에서 출력 C0,C1,C2의 상태가 결정, 순서적으로 한 개 상태씩 동작.

순서 레지스터와 디코더를 이용한 제어.
레지스터 : 제어상태의 순서를 정하는 사용.
디코더 : 각 상태마다 하나의 출력만을 나오도록 사용.
n-비트 순서 레지스터 : n개의 플립-플롭과 게이트로 구성.

하드웨어에 의한 제어.
장점 : 순서회로를 사용함으로써 부품의 수는 최소화 되고, 동작속도는 극대화 된다.
단점 : 시스템이 복잡해지면 설계가 어렵고, 한번 구성되면 바꾸기 어렵다.
RISC 방식에 사용.






