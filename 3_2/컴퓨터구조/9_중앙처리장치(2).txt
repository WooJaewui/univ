
 중앙처리장치(2)



 # 간단한 구조의 컴퓨터 설계.

설계 과정.
기본적인 컴퓨터 구성 설계.
컴퓨터 명령어 설계.
명령어 분석을 통한 제어논리 설계.
하드웨어에 의한 제어장치 설계.

기본적인 컴퓨터 구성요소.
기억장치( 256x8 )
6개의 레지스터.
2개의 디코더.
제어논리 게이트.

컴퓨터 설계를 위한 레지스터.
데이터 레지스터 DR : 기억장치에서 읽어올 단어의 내용이나 기억장치에 쓰여질 단어의 내용을 갖는다.
주소 레지스터 AR : 오퍼랜드의 주소를 갖는다.
누산기 AC : 데이터 처리가 이러우지는 특수 레지스터
명령어 레지스터 IR : 명령어의 연산코드를 갖고 있다.
프로그램 카운터 PC : 수행하려는 명령어의 주소를 갖고 있다.
타이밍 카운터 TC : 타이밍 변수 T0 ~ Tn까지를 카운트한다.

명령어의 설계.
실제 연산코드에 필요한 비트 수는 사용하는 연산의 총 수와 관련한다.
2**n개의 연산을 수행하기 위해서는 최소한 n-비트가 필요하다.

명령어 인출 단계.
PC가 지정한 번지에 있는 연산코드를 기억장치로부터 DR로 읽어온다.
다음에 연산코드는 DR로부터 IR로 전송되고, 
PC는 기억장치의 다음 주소를 지정하기 위해 1 증가한다.

레지스터 전송표현.
컴퓨터 명령어가 수행하는 연산을 정의하고, 컴퓨터의 내부 동작을 나타내는데 유용한 방법.
전송문에서 나타낸 제어 함수와 마이크로 연산이 디지털 시스템을 설계하는데 사용.

마이크로 연산.
레지스터의 종류와 데이터 처리장치에서 수행해야 할 디지털 함수를 나타내며,
제어 함수는 제어장치에 필요한 제어논리 게이트를 나타낸다고 볼 수 있다.

제어 함수.
논리 게이트들을 이용한 논리회로로 구현할 수 있으며, 이렇게 구현된 제어논리들이 
마이크로 연산을 수행하게 되게 때문에 하드웨어에 의한 제어장치를 구현할 수 있게 된다.

제어 함수의 유도.
명령어 수행단계에서의 모든 전송문을 조사하여 같은 마이크로 연산을 수행하는 문장을 찾아 제어함수를 유도.



 # 명령어 파이프라이닝.

파이프라이닝 pipelining.
어떤 일을 실행하는데 있어서 하나의 일을 여러 단계로 나누어,
중첩되게 실행함으로써 성능을 높이는 방법.

명령어 파이프라이닝 instruction pipelining.
CPU의 처리속도를 향상시키기 위한 방법 중의 하나로서,
CPU의 내부 하드웨어를 여러 단계로 나누어 처리하는 기술.
하나의 처리기를 여러 개의 부 처리기로 나누어 각각의 처리기가 서로 다른 데이터를 처리하는 구조.
명령어 파이프라이닝을 명령어 수행 사이클에 적용하면 훨씬 빠르게 명령어를 처리할 수 있다.

명령어 파이프라인 종류.
2단계 명령어 파이프라인.
4단계 명령어 파이프라인.
6단계 명령어 파이프라인.

2단계 명령어 파이프라인.
명령어 인출 단계.
명령어 실행 단계.

2단계 명령어 파이프라인의 실행 흐름도.


2단계 명령어 파이프라인의 실행과 문제점.
실행속도 : 명령어의 수행을 인출 실행 단계가 중첩되도록하면 처리 속도를 2배 향상될 수 있다.
문제점 : 두 단계의 처리시간이 항상 동일해야 한다는 제약이 발생.
해소책 : 파이프라인의 각 단계의 수를 늘려서 각 단계의 처리시간을 같게 한다. ( 단계의 세분화 )

4단계 명령어 파이프라인.
명령어 인출 단계 IF.
명령어 해독 단계 ID.
오퍼랜드 인출 단계 OF.
명령어 실행단계 EX.

4단계 명령어 파이프라인의 실행 흐름도.


4단계 명령어 라이프라인의 실행.
실행과정 : 두 번째 클럭에서부터 명령어 단계가 중첩되어 처리되며, 최대 4개의 단계들이 동시에 처리된다.
실행속도 : 2단계 명령어 파이프라인에 비해 처리 속도가 향상될 수 있다.

6단계 명령어 파이프라인.
명령어를 인출하는 단계 FI.
명령어를 해독하는 단계 DI.
오퍼랜드를 계산하는 단계 CO.
오퍼랜드를 인출하는 단계 FO.
명령어를 실행하는 단계 EI.
연산된 결과 오퍼랜드를 저장하는 단계 WO.

6단계 명령어 파이프라인의 실행 흐름도.


6단계 명령어 라이프라인의 실행.
실행과정 : 최대 6개의 명령어 단계가 동시에 처리된다.
실행속도 : 처리 속도가 훨씬 향상될 수 있다.

파이프라이닝에 속도향상을 위한 조건.
모든 단계에서의 실행시간이 같아야 한다.
래치시간이 각 단계의 실행시간보다 무시할 정도로 작아야 한다.
실행되어야 할 명령어의 수가 많아야 한다.



 # CISC와 RISC.

CISC - 명령어 세트.
명령어에 따라 다양한 길이를 갖는 가변길이 명령어 형식을 사용.
명령어 수행시간이 1클럭에서 많게는 수백 클럭까지 소요된다.
약 200여 개이상의 명령어를 갖고 있따.

RISC - 명령어 세트.
고정길이의 명령어 형식을 사용하기 때문에 명령어 집합이 단순.
모든 명령어가 1워드 단위로 고정되어 있기 때문에 1개의 명령어를 수행하는데 1개 클럭만 소요.
약 30여 개의 명령어만을 가지고 있다.

CISC - 제어장치의 구성.
마이크로프로그램에 의한 제어방식으로 제어장치를 구성.

RISC - 제어장치의 구성.
하드웨어에 의한 제어방식으로 제어장치를 구성.

CISC - 레지스터 구조.
CPU 내부에 범용 레지스터의 수가 적다.
기억장치 접근이 자주 발생하며, 이는 컴퓨터의 성능저하의 요인이 된다.

RISC - 레지스터 구조.
CPU 내부에 많은 수( 약 32 ~ 200여 개 )의 범용 레지스터가 있다.
처리 속도의 향상을 도모할 수 있다.

CISC - 파이프라인 적용 효율.
명령어 길이가 가변적이기 때문에 처리시간을 동일하게 해주는 것이 어려워서 비효율적이다.

RISC - 파이프라인 적용 효율.
명령어가 고정길이 명령어이기 때문에 처리시간으 동일하게 해주기 용이해서 효율적이다.






