
 중앙처리장치 CPU.



 # 중앙처리장치의 개요.

중앙처리장치 - CPU.
컴퓨터에서 명령어를 수행하고 데이터를 처리하는 장치.
프로그램이 수행되는 전반적인 과정을 제어.
처리장치와 제어장치로 구성.

구성요소.
산술논리연산장치. ( 처리장치 )
레지스터 세트. ( 처리장치 )
제어장치. 
내부버스. ( 구성요소들 간의 연결통로 )

산술논리연산장치 ALU.
구성요소 : 산술연산장치, 논리연산장치, 시프터, 상태 레지스터, 보수기.
상태 레지스터 status/flag register : 연산결과의 상태를 나타내는 플래그를 저장하는 레지스터.
보수기 complementer : ALU내의 데이터에 대해 보수연산을 수행.

레지스터 세트.
CPU내의 레지스터 집합.
기억장치 중 액세스 속도가 가장 빠르다.
따라서 CPU에서의 빠른 처리속도를 지원.
빠른 속도를 갖지만 가격이 비싸므로, CPU내의 레지스터의 수는 제한된다.

제어장치.
프로그램에 의한 연산의 순서대로 기억장치, 연산장치, 입출력장치에 제어신호를 발생한다.

제어장치의 동작.
1단계 : 명령어를 해독하고, 명령어 레지스터에 저장.
2단계 : 명령어 레지스터에 저장된 명령어 실행.

내부버스.
ALU와 레지스터 간의 데이터 전송을 위한 통로 ( 데이터버스와 제어버스로 구성 )
외부장치와 데이터 전송. ( 시스템 버스와 연결 - 데이터, 주소, 제어 버스로 구성 )



 # 레지스터.

범용 레지스터.
데이터 저장과 같은 일반적인 목적을 가진 레지스터.
CPU 내부에 있는 소규모의 일시적인 기억장치로, 연산결과를 일시적으로 기억시키는데 사용.

범용 레지스터의 형태.
일반적인 구조
스크래치패드 메모리 구조 : 메모장 형태의 메모리 구조.

특수 레지스터 종류.
주소를 기억하는 레지스터. ( AR )
명령어를 기억하는 레지스터. ( IR )
데이터를 기억하는 레지스터. ( DR )

주소를 기억하는 레지스터 - PC Program Counter
다음에 수행되어질 명령어가 있는 주소를 갖고 있다. ( 데이터가 저장되어 있는 기억장치의 주소 )
현재 처리하려고 하는 데이터를 인출한 후에는 다음주소로 이동.
프로그램 카운터의 비트 수는 기억장치의 용량에 따라 결정된다.

주소를 기억하는 레지스터 - 기억 장치 주소 레지스터 ( MAR Memory Address Register )
기억장치 주소를 임시 저장하는 레지스터.

주소를 기억하는 레지스터 - 스택 포인터 ( SP Stack Pointer )
스택 주소 지정방식에서 사용된다.
스택 영역의 번지를 지정해 주는 포인터.
스택 영역은 실제로 데이터가 피신되는 기억 장소로써 기억장치에 위치한다.

명령어를 기억하는 레지스터 - IR Instruction Register.
프로그램의 수행 중 가장 최근에 기억장치로부터 인출되어진 명령어를 갖고 있다.
명령어 레지스터의 비트 수는 명령어의 연산코드의 비트 수와 같다.
명령어 레지스터에 있는 명령어는 해독된 후 해당되는 제어신호가 각 구성요소에 전달된다.

데이터를 기억하는 레지스터 - MBR Memory Buffer Register.
기억장치로 쓰여질 데이터나 혹은 기억장치로부터 읽혀질 데이터를 임시 저장하는 레지스터.

데이터를 기억하는 레지스터 - Ac Accumulator.
데이터를 일시적으로 저장하는 레지스터.
입력장치로부터 데이터를 받아들이거나, 출력장치로 데이터를 전송하는데 사용.
산술 및 논리연산이 이루어질 경우 오퍼랜드나 연산 결과를 일시적으로 기억하는 레지스터.
CPU가 연산을 수행 한 후 그 결과는 반드시 누산기에 저장.



 # 명령어 사이클.

명령어 사이클의 개념.
컴퓨터의 기본적인 기능은 기억장치에 기억되어 있는 프로그램을 실행하는 것.
실행되는 프로그램은 여러개의 명령어로 구성.
따라서 중앙처리장치는 기억장치에 저장되어 있는 명령어를 인출하여 실행함으로써 프로그램을 수행.
이러한 명령어의 수행과정을 명령어 사이클이라 함.

중앙처리장치에서의 명령어 수행과정.
기억장치와 중앙처리장치의 레지스터들의 동작을 통해 살펴볼 수 있다.

명령어 사이클 Instriction Cycle.
한 개의 명령어를 CPU에서 수행하는데 필욯나 전체 수행 과정.

명령어 사이클의 종류.
인출 사이클 fetch cycle.
실행 사이클 execute cycle.
간접 사이클 indirect cycle.
인터럽트 사이클 interrupt cycle.

명령어 수행 과정.
명령어 인출 : 기억장치로부터 명령어를 가져오는 과정.
명령어 해석 : 명령어를 해독하는 과정.
명령어 실행 : 지정된 연산을 실행하는 과정. ( 간접주소지정인 경우 유효주소를 다시 인출 )
저장 : 명령어 실행단계에서 수행된 연산 결과가 레지스터 혹은 기억장치에 쓰여지는 과정.
인터럽트 처리 : 명령어 실행 도중 다른 장치에 의해 인터럽트가 들어오면 합당한 서비스를 제공하는 과정.

명령어 인출 과정.
저장된 데이터를 MAR로 이동.
MAR에 저장된 주소를 가지고 기억장치에 저장된 내용을 MBR로 이동시켜 PC를 1증가시킨다.
MBR에 저장된 내용을 IR로 이동시킨다.

명령어를 실행하는 과정.
이 과정에서는 인출괒어을 통하여 IR 레지스터에 실린 명령어를 해독하고, 명령어에 따라 필요한 연산 수행.

수행되는 연산들의 기능.
데이터의 이동 기능 : 기억장치와 CPU 혹은 입출력장치 사이에 데이터의 이동.
데이터 처리 기능 : 산술 혹은 논리연산을 통한 데이터 처리.
데이터의 저장 기능 : 연산결과를 기억장치에 저장.
제어 기능 : 프로그램의 실행 순서를 결정.

LOAD 명령어.
데이터 이동을 위한 명령어이다.
기억장치의 데이터를 CPU의 내부 레지스터인 누산기로 가져오는 명령어이다.

LOAD 명령어 실행 순서.
누산기로 이동할 데이터가 들어가있는 주소가 MAR에 실린다.
MAR 레지스터에 있는 주소의 데이터가 MBR에 실린다.
MBR에 들어있는 데이터를 누산기로 읽어온다.

ADD 명령어.
데이터 처리명령어로서 누산기에 있는 데이터와 기억장치에 있는 데이터를 더한 후 누산기에 저장.

ADD 명령어 실행 순서.
더해질 데이터가 들어가있는 기억장치의 주소가 MAR에 실린다.
MAR에 있는 기억장치 주소에 해당하는 데이터가 MBR에 실린다.
누산기에 있는 데이터와 MBR에 있는 데이터가 더해지고, 결과가 누산기에 저장된다.

STORE 명령어.
연산결과를 갖고 있는 누산기의 데이터를 기억장치에 저장하는 동작을 수행.

STORE 명령어 실행 순서.
저장되어질 주소가 MAR에 실린다.
누산기에 있는 데이터가 MBR에 실린다.
MBR에 있는 데이터가 MAR에 있는 주소로 저장된다.

분기 혹은 점프 명령어.
제어기능을 수행하는 명령어로써 프로그램의 순서를 바꾸는 명령어이다.

분기 혹은 점프 명령어 실행 순서.
분기 혹은 점프 명령어에 있는 주소가 PC에 실린다.

간접 사이클.
간접주소지정방식에서 명령어 오퍼랜드의 유효주소를 결정하는 과정.
인출 사이클에서 인출도니 명령어가 간접주소지정방식으 사용하면, 간접 사이클이 실행 사이클보다 먼저 실행.

간접 사이클 실행 순서.
명령어의 주소가 MAR에 실린다.
MAR이 지정한 주소의 데이터가 MBR에 실린다.
MBR에 있는 데이터가 IR의 주소 필드에 실린다.

인터럽트 사이클.
CPU의 정상적인 동작 중에 인터럽트 요청이 발생했을 때 실행되는 과정.
실행 사이클이 끝난 직후에 인터럽트가 발생했는지를 검사.
발생했다면 인터럽트 서비스 루틴( ISR Interrupt Service Routine )이 시작되도록 하는 것.

인터럽트 사이클 실행 순서.
현재 수행하고 있는 명령어를 처리한 후, 다음에 수행할 명령어 주소를 갖고 있는 PC의 내용을 스택에 저장.
요청된 인터럽트 서비스 루틴을 호출하여 그 서비스 루틴의 시작 주소를 PC에 저장.




