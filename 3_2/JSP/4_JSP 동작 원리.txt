
 JSP 동작 원리.



 # JSP 처리 과정.

JSP 페이지의 최초 요청을 처리할 때.
JSP 페이지를 서블릿 자바 프로그램로 변환.
서블릿 자바 프로그램을 컴파일하여 서블릿 클래스 파일을 생성.
서블릿 클래스 파일을 실행하여 클라이언트 요청을 처리.

이후 요청의 처리 시.
JSP 페이지에 상응하는 서블릿이 존재하면 변환과 컴파일을 하지 않고 실행한다.
JSP 페이지가 수정되면 다시 변환/컴파일 작업을 해야 함.



 # 출력 버퍼와 응답.

출력 버퍼의 사용.
출력 버퍼는 응답 결과의 임시 저장소.
응답을 만들 때 먼저 출력 버퍼에 기록함.
Page 지시어의 buffer 속성이 none이 아니어야 함.
기록이 끝나면 버퍼의 내용을 클라이언트에게 전달.
종료 전에 버퍼가 차면, 버퍼를 비우고 flush함. ( page 지시어의 autoFlush가 true여야 함 )
autoFlush가 false이면 버퍼가 가득 찼을 때 Exception 발생.

버퍼를 사용하는 이유.
데이터 전송 효율의 향상.
실행 도중에 버퍼를 비우고 새로운 내용을 넣을 수 있음. 
아직 전송 전이면 버퍼에 있는 헤더의 내용도 변경할 수 있음.

buffer 속성.
버퍼를 사용하는 경우, 크기를 지정함. ( 기본값 8kb )
버퍼를 사용하지 않는 경우 none으로 설정.

버퍼를 사용하지 않는 경우의 제한.
<jsp:forwar> 기능을 사용할 수 없음.
오류 페이지 속성을 사용하는 경우에도 버퍼링이 필요.
출력된 결과를 변경할 수 없음.
즉시 전송되므로 도중에 오류가 생기면 이전 결과와 오류 정보가 섞임.

autoFlush 속성.
true인 경우 버퍼가 차면 버퍼를 비워 전송하고 작업을 계속함.
false인 경우 버퍼가 차면 예외가 발생함.



 # 서블릿 프로그래밍.

JSP와 서블릿
JSP 기술은 서블릿 기술에 기초함.
JSP 페이지는 자바 서블릿 프로그램으로 변환되어 처리됨.
Tomcat은 JSP와 서블릿 규약을 구현한 서블릿 컨테이너 / JSP 컨테이너.

서블릿 클래스.
실제 서블릿을 실행하면 생성자, init( ), service( ), doGet( ) 또는 doPost( )순으로 실행됨.
service( )에서 method방식에 따라 doGet( ) 또는 doPost( )를 실행하게 해준다.

doGet( ) 메소드.
서버가 서블릿을 통해 GET 요청을 처리하기 위해 호출하는 메소드.
데이터를 보낼 때 글자수의 제한이 있다.
실제로는 서블릿 클래스에서 service( ) 메소드에 의해 호출됨.

doPost( ) 메소드.
서버가 서블릿을 통해 POST 요청을 처리하기 위해 호출하는 메소드.
POST방식은 클라이언트가 웹 서버에 많은 양의 데이터를 보낼 때 사용.
실제로는 서블릿 클래스에서 service( ) 메소드에 의해 호출됨.





