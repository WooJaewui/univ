
 세션 사용하기.



 # 세션 관리.

세션의 의미.
클라이언트의 상태 관리를 위한 기법.
클라이언트가 특정 작업을 수행하는 기간.
클라이언트는 여러 페이지를 이동하면서 연관된 일련의 요청을 보냄.
이런 경우 웹 애플리케이션은 클라이언트의 상태를 유지해야 함.
즉, 클라이언트 별로 필요한 정보를 저장할 수 있어야 함.

세션 관리.
서버는 웹 브라우저 별로 1개의 세션을 생성함.
웹 브라우저를 종료하면 세션이 종료됨.
세션 유효 시간이 경과되는 경우 기존 세션이 종료됨.

JSP 세션 관리.
웹 컨테이너는 웹 브라우저당 1개의 세션 아이디를 부여함.
클라이언트의 최초 요청시 웹 컨테이너는 session 객체를 만들고 세션 아이디를 부여함.
최초 요청의 응답에 세션 아이디를 쿠키로 포함시켜 웹 브라우저에 전송.
이후 웹 브라우저는 자신의 세션 아이디를 웹 컨테이너에 전송함.
클라이언트가 보낸 세션 아이디를 이용하여 사용자를 식별.

쿠키.
사용자 정보가 클라이언트 측에 저장됨.
텍스트 파일로 저장됨.
정보의 크기에 제한이 있음.
상대적으로 보안에 약함.

세션.
서버 측에 저장됨.
객체의 형태로 저장됨.
정보의 크기에 제한이 없음.
서버에 저장되어 상대적으로 보안에 유리.

session 내장 객체.
JSP 기술에서 세션 관리를 위해 제공되는 내장 객체.
클라이언트가 웹 컨테이너에 최초 접속하면 세션이 자동으로 만들어짐.
page 지시어에서 session 속성을 "false"로 하면 세션을 지원하지 못함. ( 기본값 true )
접속할 때 세션이 존재하면 기존 세션을 그대로 사용.
웹 컨테이너가 제공하는 HttpSession 유형의 객체.



 # session내장 객체의 사용.

session 내장 객체의 기본 기능.
하나의 웹 브라우저로부터 들어오는 여러 요청을 처리할 때, 필요한 정보를 session 에 저장.
session 영역에서 데이터 공유를 위해 속성을 저장할 수 있음.

session 내장 객체의 메소드.
getId( ) : 세션별로 고유하게 부여되는 세션 아이디를 리턴.
getCreationTime( ) : 세션이 생성된 시간을 리턴.
getLastAccessedTime( ) : 세션에 가장 마지막으로 접근할 시간을 리턴.
setMaxInactiveInterval( long ) : 세션의 유효 시간을 초 단위로 설정.
invalidate( ) : 세션을 삭제.

속성 사용하기.
세션이 유지되는 동안 여러 요청을 처리하는데 사용되는 JSP 페이지들 사이에서 session 공유.
request 객체는 한 개의 요청을 처리하는 JSP 페이지들 사이에서 공유됨.
setAttribute( key, value ), getAttribute( )를 사용할 수 있다.

세션 삭제하기.
invalidate( )를 사용하면 해당 세션에 저장도니 모든 속성이 삭제됨.
세션에 저장된 특정 속성만 삭제하려면 removeAttribute( String name )을 사용.
사용자가 웹 브라우저를 종료하면 기존 세션이 삭제됨.
웹 브라우저를 종료하지 않더라도 설정된 유효 시간이 초과되면 세션이 삭제됨.

세션의 유효시간.
클라이언트가 서버에 추가 요청을 하지 않고도 세션을 유지시킬 수 있는 최대 시간.
web.xml 파일에 <session-config><session-timeout>분</session-timeout><session-config>
Java 파일에 session.setMaxInactiveInterval( 초 ) - 0 또는 음수는 무제한 유지.

session 객체를 수동으로 얻기.
JSP에서 세션은 자동으로 만들어짐.
서블릿 프로그램에서는 session이 내장 객체가 아님.
reqeust.getSession( )을 사용하여 현재의 세션 객체를 이용할 수 있음.
세션이 존재하지 않으면 세션 객체를 생성하여 리턴함.
request.getSession( false )는 현재 세션 객체를 리턴하는데, 존재하지 않으면 null을 리턴.



 # 세션을 이용한 로그인/로그아웃 처리.

로그인 폼을 제시.
아이디와 비밀번호를 입력.

로그인 처리.
입력된 아이디, 비밀번호를 확인.
로그인을 위해 회원 DB를 확인.
아이디, 비밀번호가 정확하면 session 객체에 로그인 여부 확인르 위한 속성을 저장.

로그인 여부 확인.
session 객체에 특정 속성이 설정되어 있는지 여부로 확인.
여기서는 이름이 "login"인 속성의 값을 확인.
해당 속성의 값이 admin이면 로그인 한 상태가 됨.

로그아웃 처리.
세션 삭제.



