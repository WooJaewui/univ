 
 JSP 출석수업.



 # 웹.

하이퍼텍스트 HyperText.
웹 상에 존재하는 문서 형태로서 텍스트 외에 이미지, 동영상 등의 멀티미디어 요소를 포함.

하이퍼링크 Hyperlink.
다른 하이퍼텍스트와 연결되는 방식이다.

동적 웹 문서.
최종 결과가 동적으로 만들어짐.
클라이언트 측 처리와 서버측 처리 방식이 있다.
JSP는 동적 웹 문서를 작성하는 기술임.

웹 애플리케이션.
웹에서 실행되는 응용 프로그램.

웹 서비스의 제공과 구성 요소.
웹 클라이언트 : 웹 브라우저는 웹 서버에 요청을 보내고 응답 결과를 출력.
웹 서버 : 클라이언트의 요청을 처리하도록 프로세스를 관리.
웹 애플리케이션 서버 : 웹 애플리케이션의 실행 환경.
데이터베이스 : 웹 서비스 수행에 필요한 데이터를 저장하고 제공.

클라이언트 측 실행.
보안의 문제가 있다.
JavaScript 등.

서버 측 실행.
서버의 부담이 크다.
Servlet, JSP 등.

CGI Common Gateway Interface.
동적으로 웹 페이지를 생성하기 위한 방식 중 하나.
클라이언트의 요청이 있으면 해당 프로그램을 실행시키기 위해 개별 프로세스를 생성함.

WAS Web Application Server.
웹 애플리케이션을 실행하고 관리하는 별도의 전담 프로그램.
요청을 처리하기 위해 스레드를 생성함.

웹 서버.
Apache HTTP Server, IIS, Nginx
HTTP 프로토콜을 사용하여 클라이언트와 통신함. ( 클라이언트와 웹 간의 통신 규약 )

웹 서버의 기능.
클라이언트가 요청한 웹 문서를 찾아 전달.
클라이언트 요청에 대한 기본적 사용자 인증을 처리.
문제가 있으면 정해진 코드 값으로 응답.
프로그램 실행 요청이 있으면 처리 후 전달.



 # JSP와 컨테이너.

서블릿.
Server + Applet의 합성어.
Java 언어에 기초한 웹 프로그램의 개발 기술.

JSP JavaServer Pages 특징.
서블릿 대신에 사용할 수 있는 스크립트 형식의 언어.
JSP 페이지는 서블릿으로 변환됨.
Java와 HTML 스크립트 언어를 혼합해서 사용.

웹 컨테이너.
웹 컴포넌트를 저장하고 서블릿의 생명주기를 관리.
서블릿 컨테이너라고도 함.
Tomcat, WildFly, WebLogic, WebSphere 등.



 # HTTP 프로토콜.

HTTP 프로토콜.
웹 서버와 클라이언트가 통신하는 규약.
TCP 프로토콜에 기초한 애플리케이션 계층 프로토콜.

Connection oriented & Stateless 특성.
요청을 위해 접속을 해야 함.
웹 서버의 부담이 줄어드나 상태 관리를 위해 쿠키나 세션 등이 필요.



 # 개발 환경 설정하기.

다운로드.
JDK : 오라클 공식 홈페이지에서 다운받기. ( JDK 16을 설치 - 압축파일 )
Tomcat 9 : 톰켓 공식 홈페이지에서 다운받기. ( 압축파일 받아서 풀기 )
eclipse : 이클립스 공식 홈페이지에서 다운받기. 

환경변수 설정.
JAVA_HOME 환경변수를 새로 만들기. ( JDK 설치 폴더로 설정함 )
Path 안에 JDK 폴더를 넣기.

개발과 실행.
동적 웹 프로젝트를 생성.
서블릿 또는 JSP 페이지를 작성.

웹 컨테이너 등록하기.
이클립스에 톰캣을 등록하는 것을 의미한다.
이클립스 -> Severs -> new -> Tomcat 9 설정 -> next -> Tomcat directory에 tomcat 폴더 넣기.

배포.
실제 서비스를 위해 웹 프로젝트를 war파일 형태로 톰캣에 배포함. ( 개발과 서로 다른 위치에 존재 )

배포과정.
프로젝트 파일 우클릭 -> Export -> WAR file -> Destination -> Tomcat에 webapps안에 프로젝트명.war로 생성.

배포확인.
localhost:8080\프로젝트명/파일명


 
 # JSP 기술.

JSP 페이지의 구성 요소.
스크립트 요소.
지시어.
액션 태그.
내장 객체.
표현 언어.
JSTL과 사용자 정의 태그.
주석.

스크립트 요소의 종류.
스크립트릿 ( Scriptlet ) : <% 내용 %>
표현식 ( Expression ) : <%=변수 %> , ' ; '을 사용하지 않는다.
선언 ( Declaration ) : <%! 변수 또는 메소드 선언 %>
지시어 : <%@ 헤더 내용 %>

지시어의 종류.
include : 번역 과정에서 복사하여 삽입시킬 텍스트나 코드를 지정.
page : JSP 페이지에 대한 정보를 지정. ( Java Import 등 )
taglib : 태그 라이브러리의 위치와 접두어를 지정.

내장 객체.
자주 사용되는 기능을 JSP 컨테이너가 객체 형태로 제공한 것.
별도의 선언이나 초기화 없이 사용 가능.
예 - request, response, session, out 등.

액션 태그의 의미.
요청을 처리할 때, 특별한 기능을 수행하는 XML 태그와 같은 모양.
예 - <jsp : 액션이름 속성 = " 값 " ... />

표현 언어.
데이터를 쉽게 다루기 위한 간단한 스크립트 언어.
액션 태그의 속성 값을 설정하거나 템플릿 데이터 내부에서 값을 출력할 때 사용.
예 - ${ expr } 

JSTL JSP Standard Tag Library.
조건문, 반복문과 같은 프로그래밍 요소를 태그 형태로 사용할 수 있게 함.

사용자 정의 태그.
사용자가 정의한 커스텀 태그.
JSTL을 확장하기 위한 것이다.

프로젝트 실제 파일 확인하기.
workspace -> .metadate -> .plugins -> org.eclipse.wst.server.core -> tmp0 -> work
-> Catalina -> localhost -> 프로젝트명 -> org -> apache -> jsp -> 파일 확인.



 # page 지시어.

지시어의 주요 속성.
autoFlush ( 기본값 - true ) : 버퍼가 차면 자동으로 버퍼를 비워 내용을 클라이언트에 보냄.
contentType : 결과로 생성되는 응답의 종류. charset 정보를 설정할 수 있다.
session : session 객체를 사용할지 여부를 지정. ( true )
buffer : JSP 페이지의 출력 버퍼 크기를 지정한다. ( 8kb, 25kb 등으로 지정 ) 
info : JSP 페이지에 대한 설명을 텍스트로 입력할 때 사용.
errorPage : JSP 페이지 실행 중 에러가 발생할 때 보여줄 페이지를 설정.
pageEncoding : JSP 페이지 자신의 문자 인코딩을 지정.




