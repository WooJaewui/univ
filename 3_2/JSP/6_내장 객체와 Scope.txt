
 내장 객체와 Scope.



 # 객체의 종류.

사용자 정의 객체.
JSP 페이지 내에서 선언하고 사용하는 객체.
스크립트릿이나 선언에서 객체를 생성한 경우.
<jsp:useBean>을 이용해 자바빈 객체를 생성한 경우.

JSP 내장 객체.
JSp 컨테이너가 번역 과정에서 만들어서 제공.
JSp 페이지 안에서 묵시적으로 선언되어 있는 객체.
선언이나 초기화 없이 사용할 수 있는 변수.
스크립트릿, 표현식, 표현 언어 등에서 사용함.

JSP 내장 객체.
response : 웹 서버의 응답 정보 관리.
PageContext : JSP 페이지에 대한 정보 관리.
request : 클라이언트의 요청 정보 관리.
session : HTTP 세션 정보 관리.
application : 웹 애플리케이션에 대한 정보 관리.

scope 외에 JSP 내장 객체.
out : 브라우저에게 보낼 컨텐츠를 출력할 때 사용되는 출력 스트림.
config : JSP페이지에 대한 설정 정보 관리.
page : JSP 페이지를 구현한 자바 클래스의 인스턴스.
exception : 에러 페이지 안에서 오류 메시지 출력 등의 예외 처리에 사용.



 # pageContext, application, out 객체.

pageContext 내장 객체.
페이지 컨텍스트를 관리하는 객체.
page를 표현하고 page 영역을 관리하는 객체.
페이지에서 사용되는 객체들의 레퍼런스를 저장하고 있음.
다른 내장 객체의 참조 값을 리턴하는 메소드를 제공.
javax.servlet.jsp.PageContext의 인스턴스.
JSP 페이지에서 잘 사용하지 않음.

pageContext 메소드.
getRequest( ) : request 객체를 리턴.
getResponse( ) : response 객체를 리턴.
getSession( ) : session 객체를 리턴.
getServletContext( ) : application 객체를 리턴.
getServletConfig( ) : config 객체를 리턴.
getOut( ) : out 객체를 리턴.
getException( ) : exception 객체를 리턴.
getPage( ) : page 객체를 리턴.
getAttribute( "name" ) : pageContext안의 저장된 데이터를 name으로 찾아서 리턴한다.
setAttribute( "name" , value ) : pageContext안에 데이터를 저장한다.

application 내장 객체.
JSP( Servlet )에서 가장 큰 저장공간이다.
웹 애플리케이션과 관련된 정보를 관리.
web.xml에 저장된 설정 정보의 조회.
웹 컨테이너의 정보 조회.
로그 메시지의 기록.
웹 애플리케이션의 폴더 정보 조회.
서블릿 컨텍스트를 관리하는 객체.
특정 웹 애플리케이션에 포함된 모든 JSP 페이지는 하나의 application 객체를 공유함.
javax.servlet.ServletContext의 인스턴스.

web.xml에서 application 데이터 저장.
웹 애플리케이션 내의 모든 JSP 페이지에서 공유되는 설정 정보를 저장.
<context-param> 태그를 이용하여 데이터를 설정하여 공유할 수 있음. ( init-param )

application 메소드.
getInitParameter( "name" ) : xml에서 <context-param>으로 설정한 값을 리턴한다.
getInitParameterNames( ) : xml에서 <context-param>으로 설정한 이름들을 Enumeration으로 리턴.
getAttribute( "name" ) : application안의 저장된 데이터를 name으로 찾아서 리턴한다.
setAttribute( "name" , value ) : application안에 데이터를 저장한다.
getServerInfo( ) : 서버의 정보를 리턴.
getMajorVersion( ) : 서버가 지원하는 서블릿 규약의 버전 앞 번호를 리턴.
getMinorVersion( ) : 서버가 지원하는 서블릿 규약의 버전 뒷 번호를 리턴.

out 내장 객체.
클라이언트로 보낼 컨텐츠를 작성하기 위해 사용하는 출력 스트림.
JspWriter 유형의 out 객체를 이용함. ( 서블릿 - response.getWriter( ) )
서블릿 프로그램으로 변환될 때 HTML 태그나 텍스트는 out.print( String )에 문자열로 전달됨.

out 메소드.
print( 인자 ), println( 인자 ) : 출력과 관련된 메소드.
newline( ) : 줄 바꿈 문자를 출력.
getBufferSize( ) : 버퍼 크기를 리턴.
getRemaining( ) : 현재 남아 있는 버퍼의 크기를 리턴.
clear( ) : 버퍼의 내용을 비움. 만약 버퍼가 비워져 있다면 IOException 발생.
clearBuffer( ) : 버퍼의 내용을 비움. 비워져 있어도 IOException을 발생시키지 않음.
flush( ) : 버퍼의 내용을 비워 출력시킴.
isAutoFlush( ) : page 지시어에서 설정한 autoFlush 속성 값을 리턴.

out 객체와 버퍼링.
JSP 페이지의 실행 결과는 기본적으로 자동 버퍼링됨. ( 기본값 8kb )
버퍼는 out 객체가 내부적으로 사용하는 버퍼임.



 # 내장 객체와 영역.

영역.
JSP 페이지에서 객체들은 scope 속성을 가짐.
scope는 객체의 활동 영역 또는 객체의 사용 범위를 의미.
영역을 표시하는 속성 값으로 pageContext, request, session, application이 존재함.
같은 영역 내의 JSP 페이지들은 협력 작업을 위해 정보를 공유할 필요가 있음.
데이터 공유를 위해 영역을 표현하는 내장 객체가 존재함.

pageContext 영역.
1개 JSP 페이지 내부.
클라이언트에게 응답을 보내거나 포워딩이 일어나면 없어짐.
page 영역에 존재하는 객체 레퍼런스들은 pageContext 객체에 저장됨.

request 영역.
같은 요청을 처리하는 페이지들로 이루어짐.
<jsp:forward> 또는 <jsp:include>에서 사용됨.
요청의 처리가 끝나면 영역은 없어짐.
요청에 대한 응답이 이루어질 때까지 유지됨.
요청이 1개의 JSP 페이지에서 처리되면 page 영역과 request 영역은 동일함.
영역의 정보는 request 객체에 저장됨.

session 영역.
같은 세션 내에서 일련의 요청을 처리하는 페이지들로 이루어짐.
세션은 하나의 웹 브라우저에서 유지됨.
웹 브라우저가 실행되는 동안 요청 처리에 사용된 모든 page 영역의 총합.
session 영역의 객체 레퍼런스는 session 객체에 저장됨.

application 영역.
1개 웹 애플리케이션 전체 영역.
같은 애플리케이션 내의 페이지들 간에 공유하는 정보가 존재함.
웹 컨테이너를 다시 시작시키면 기존 영역이 없어진 후 다시 만듬.
영역의 정보는 application 객체에 저장됨.



