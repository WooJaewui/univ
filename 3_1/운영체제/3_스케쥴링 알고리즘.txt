
 스케쥴링 알고리즘.



 # 스케줄링 성능 평가 기준.

PCB Proccess Control Block.
특정한 프로세스에 대한 정보를 포함하는 자료구조이다.

스케줄링 성능 평가 기준 - 평균 대기시간.
각 프로세스가 준비 큐에서 기다리는 시간의 합의 평균값.

평균 반환시간.
각 프로세스가 생성되어 준비 큐에서 기다리는 시간부터 수행이 완료된 시점까지 소요시간의 평균값.



 # 다양한 스케줄링 알고리즘.

디스패치.
준비 큐에서 실행 상태로 바뀌는 과정. ( CPU를 할당 받음 )

FCFS First-Come First-Served 스케줄링.
비선점 스케줄링 알고리즘.
준비 큐에 도착한 순서에 따라 디스패치.

FCFS 스케줄링 장점.
가장 간단한 스케줄링 기법.

FCFS 스케줄링 단점.
짧은 프로세스가 긴 프로세스를 기다리거나 중요한 프로세스가 나중에 수행될 수 있음.
프로세스들의 도착 순서에 따라 평균 반환시간이 크게 변함.

SJF Shortest Job First 스케줄링.
비선점 스케줄링 알고리즘.
준비 큐에서 기다리는 프로세스 중 실행시간이 가장 짧다고 예상된 것을 먼저 디스패치.

SJF 스케줄링 장점.
일괄처리 환경에서 구현하기 쉬움.

SJF 스케줄링 단점.
실행 예정 시간 길이를 사용자의 추정치에 의존하기 때문에 정확한 CPU 시간을 예상할 수 없음.
예상시간이 긴 프로세스를 오랜시간동안 처리못할 수 있다.

SRT Shortest Remaining Time 스케줄링.
선점 스케줄링 알고리즘.
실행이 끝날 때까지 남은 시간 추정치가 가장 짧은 프로세스를 먼저 디스패치.

SRT 스케줄링 장점.
SJF보다 평균 대기시간이나 평균 반환시간에서 효율적.
대화형 운영체제에 유용.

SRT 스케줄링 단점.
각 프로세스의 실행시간 추적, 선점을 위한 문맥 교환 등 SJF보다 오버헤드가 큼.

RR Round Robin 스케줄링.
선점 스케줄링 알고리즘.
준비 큐에 도착한 순서에 따라 디스패치하지만 정해진 시간 할당량에 의해 실행을 제한.
시간 할당량 안에 완료되지 못한 프로세스는 준비 큐의 맨 뒤에 배치.

RR 스케줄링 장점.
CPU를 독점하지 않고 공평하게 이용.
대화형 운영체제에 유용.

RR 스케줄링 단점.
시간 할당량이 너무 크면 FCFS 스케줄링과 같아짐.
시간 할당량이 너무 작으면 문맥 교환에 따른 오버헤드가 크게 증가함.

HRN Highest Response Ratio Next 스케줄링.
비선점 스케줄링 알고리즘.
준비 큐에서 기다리는 프로세스 중 응답비율이 가장 큰 것을 먼저 디스패치.
응답비율 = 대기시간 / 예상 실행시간 + 1 
예상 실행시간이 짧을수록, 대기시간이 길수록 응답비율이 커짐.

HRN 장점.
아무리 큰 예상 실행시간이 있어도 오래 기다리면 우선순위로 실행할 수 있다. - SJF의 단점을 보완.

다단계 피드백 큐 스케줄링.
선점 스케줄링 알고리즘.
I/O 중심 프로세스와 CPU 중심 프로세스의 특성에 따라 서로 다른 시간 할달량 부여.
n개의 단계 ( 단계1 ~ 단계 n ) 
각 단계마다 하나씩의 큐 존재.
단계가 커질수록 시간 할당량도 커짐.

다단계 피드백 스케줄링 방법.
신규 프로세스는 단계1의 큐에서 FIFO 순서에 따라 CPU 점유.
시간 할당량을 다 썼지만 프로세스가 종료되지 못헀다면 다음 단계의 큐로 이동 배치.
마지막 단계 n에서는 RR 스케줄링 방식으로 동작.
단계 k의 큐에 있는 프로세스가 CPU를 할당 받으려면 단계1부터 단계 k-1까지 비어있어야만 함.

다단계 피드백 스케줄링 장점.
I/O 위주의 프로세스는 높은 우선권 유지.
연산 위주의 CPU 중심 프로세스는 낮은 우선권이지만 긴 시간 할당량 가짐.

적응적 다단계 피드백 큐 스케줄링.
시간 할당량을 다 쓰기 전에 CPU를 반납하는 경우 하나 작은 단계의 큐로 이동 배치.
연산 위주의 프로세스가 I/O 위주로 바뀐다면 점점 작은 단계로 배치 가능.





