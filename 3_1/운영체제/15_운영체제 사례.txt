
 운영체제 사례.



 # Linux.

리눅스의 개요.
1991년 핀란드 헬싱키 대학의 Linus Torvalds에 의해 최초 버전 발표.
일체형( Monolithic ) 커널.
이후 GNU GPL( General Public License ) 하에 커널 소스를 공개.
1994년 5월 커널 버전 1.0.0 발표.

리눅스의 장점.
UNIX와 완벽하게 호환 가능.
공개 운영체제.
안정적인 운영체제.
무료 운영체제.
하드웨어의 기능을 효과적으로 사용.
강력한 네트워크 및 멀티태스킹 지원.
다양한 응용 프로그램 제공.
인터넷의 모든 기능을 지원.

리눅스의 단점.
공개 운영체제이므로 문제점 발생 시 보상받을 수 없음.
보안 취약성에 대한 선입관.

(리눅스 커널 이미지)

리눅스 주요 특징.
멀티태스킹, 멀티 유저 시스템.
멀티프로세서 시스템 : SMP 지원.
멀티플랫폼.
	● 커널의 대부분을 C 언어로 작성하여 다양한 하드웨어 플랫폼에 손쉽게 이식됨.
POSIX 표준 준수.
	● POSIX : 다양한 UNIX 호환 운영체제에서 응용 프로그램의 호환성을 제공하기 위해 규정한 API 표준.
페이징 적용.
UNIX 시스템 V IPC 지원.
	● 세마포어, 메시지 큐, 공유 메모리 등.
다양한 파일 시스템 지원.
다양한 실행 파일 형식 지원.
네트워킹.
	● TCP/IP, IPX/SPX 등 다양한 네트워킹 프로토콜 지원.
공유 라이브러리.
모듈.
	● 새로운 하드웨어를 지원하려 할 때 디바이스 드라이버를 모듈 형태로 로드함으로써
	   커널을 교체하지 않고 새로운 기능을 커널에 추가할 수 있음.
광범위한 주변장치 지원.

임베디드 시스템.
미리 정해진 특정한 기능들을 수행하기 위해 하드웨어와 소프트웨어가 결합된 특수 목적 컴퓨터 시스템.
	● 예) 각종 정보가전, 사무기기, 자동화 제어장치 등.

임베디드 운영체제.
최근에는 주로 실시간 운영체제( RTOS )임.
	● 예) 임베디드 리눅스, VxWorks, VRTX 등.

실시간 운영체제 RTOS Real-Time Operating System.
정해진 시간 내에 필요한 결과를 어등ㄹ 수 있는 실시간 시스템.
높은 처리율을 낸다기 보다는 처리 기한을 맞출 수 있음을 의미함.
Hard real-time system.
	● 처리 기한을 반드시 지켜야 하는 시스템.
	● 예) 산업용 제어 시스템 - 자동차, 원자로 제어, 로봇 제어 등.
Soft real-time system.
	● 처리 기한이 중요하지만 엄격하지는 않은 시스템.
	● 예) 디지털 멀티미디어 장치.

임베디드 리눅스의 개요.
저성능의 CPU와 소용량의 메모리를 가진 임베디드 시스템용으로 개발된 리눅스.
필수조건.
	● 소용량 메모리를 감안하여 리눅스의 크기와 기능을 최소화하고 목표 시스템에 맞게 재구성이 가능.
	● 저성능 CPU를 사용하는 상황을 감안하여 리눅스의 성능이 최적화되어야 함.
	● 실시간 처리에 대응할 수 있어야 함.

임베디드 리눅스의 장점.
효율적, 안정적, 성숙된 내용.
오픈소스로 부담 없음.
모듈 형식의 코드여서 쉽게 최소화, 최적화 가능.
다양한 네트워크 코드로 개발에 용이.
애플리케이션과 자체 문서가 잘 되어있음.
리눅스에 익숙한 개발자는 개발이 용이.
실시간성 우수.

임베디드 리눅스의 단점.
커널, 네트워크, 각종 툴에 대한 내용이 방대하여 단시일 내 전문 개발자 양성이 어려움.



 # Windows.

윈도우의 개요.
마이크로소프트에서 개발.
IBM-PC 상에서 GUI를 실현.
1985년 Windows 1.0발표.

윈도우의 특징.
GUI.
멀티태스킹.
가상 메모리.
POSIX 서브 시스템 제공.
다중 쓰레드.
원격 데스크톱.
64비트 지원.
암호화 파일 시스템 등.

( 윈도우 NT커널 이미지 )

마이크로 커널의 문제점.
커널 외부 요소들 사이는 프로세스 간 통신( IPC )을 통해야만 하므로 성능 저하.

수정 마이크로 커널.
마이크로 커널과 일체형 커널의 적절한 타협.
Win32, POSIX 등의 서브시스템은 사용자 모드로 동작.
프로세스 관리자, 가상 메모리 관리자 등 기본적인 서브시스템은 커널 모드로 동작.

윈도우 실행부.
객체 관리자.
	● 다른 모든 실행부 하위 시스템들이 Window NT 자원에 대한 접근을 하기 위해 거쳐야 하는 
	    실행부 하위 시스템.
	● 커널 모드 개체를 사용자 모드 프로그램이 사용할 수 있도록 일반적인 인터페이스 집합을
	    제공하는 객체로 표현.
	● 실행부 객체를 생성/관리/삭제함.
프로세스 관리자.
	● 프로세스와 쓰레드를 생성/제거/사용하는 시스템 제공.
가상 메모리 관리자.
	● 가상 메모리 공간, 실 메모리 할당, 페이징 관리.
I/O 관리자.
	● 장치 독립적 I/O 시스템을 프로세스에서 제공하는 역할.
로컬 프로시저 호출( LPC ) 기능.
	● 단일 컴퓨터 내에서 클라이언트와 서버 간 요구와 결과의 전달을 담당.
보안 참조 모니터.
	● 시스템 내의 액세스 검증 및 감사 정책 시행.
윈도우 관리자와 그래픽 장치 인터페이스 GDI.
	● 사용자의 입력과 화면 출력을 제어.




