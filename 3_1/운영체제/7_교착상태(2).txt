
 교착상태(2)



 # 교착상태 회피.

교착상태 회피.
프로세스의 자원 사용에 대한 사전 정보를 활용하여 교착상태가 발생하지 않도록 하는 방법.
	● 사전 정보 : 현재 할당된 자원, 가용상태의 자원, 프로세스들의 최대 요구량.
	● 안전 상태 : - 교착상태를 회피하면서 각 프로세스에게 최대 요구량까지 자원을 할당하는 상태.
		      - 안전 순서열이 존재한다.
	● 불안전 상태 : 할당 과정에 따라 교착상태가 될 수 있는 상태.
프로세스가 가용상태의 자원을 요구하더라도 안전상태를 유지하기 위해 대기상태가 될 수 있다.

안전 순서열.
● 순서 있는 프로세스의 집합 <P1, P2, ... , Pn>
● 각 pi에 대해, pi가 추가로 요구할 수 있는 자원 소요량이 현재 가용 상태이거나 혹은 
   현재 가용인 자원에 pj( 단, j < i )에 할당된 자원까지 포함하여 할당 가능한 경우.
● 안전순서열을 만들 수 없으면 불안전 상태가 된다.

교착상태 회피 알고리즘.
각 자원 유형의 단위자원이 여러 개일 경우.
	● 은행원 알고리즘.
각 자원 유형의 단위자원이 하나밖에 없는 경우.
	● 변형된 자원할당 그래프.

은행원 알고리즘.
자원을 요청받으면 그 자원을 할당해 주고 난 후의 상태를 계산해서 그것이 안전상태가 보장되는 경우에 할당.
	● AVAIL : 가용 자원.
	● MAXi : pi의 최대 요구.
	● ALLOCi : pi의 할당 자원.
	● NEEDi : pi의 추가 요구.
	● WORK : 안전 순서열에서 사용할 수 있는 자원의 수.
	● FINISH : 안전상태를 표현.
시간 복잡도.
	● O( m( n ** 2 ) )
	● m : 자원유형 , n : 프로세스의 개수.

변형된 자원할당 그래프.
● 할당간선( rj, pi ) : 자원 rj가 프로세스 pi에 할당됨.
● 요구간선( pi, rj ) : 프로세스 pi가 자원 rj를 요구함.
● 선언간선( pi, rj ) : 앞으로 프로세스 pi가 자원 rj를 요구하게 될 것임.
● 자원을 요청받으면 그 요구간선을 할당간선으로 변환하여도 사이클이 발생되지 않는 경우에만 할당.



 # 교착상태 탐지 및 복구.

교착상태 탐지.
시스템의 교착상태 여부를 탐지하기 위해 주기적으로 상태 조사 알고리즘을 수행.

교착상태 복구.
교착상태가 탐지된 경우 복구조치에 들어감.

Shoshani와 Coffman 알고리즘 - 교착상태 탐지.
안전 알고리즘과 비슷하다.
Shoshani와 Coffman 알고리즘은 현재 요구상태를 보고 안전상태를 파악한다. ( NEED -> REQ )
FINISH가 false인 프로세스가 있으면 그 프로세스에서 교착상태가 발생할 수 있다고 판단할 수 있다.
알고리즘 수행 시점.
	● 즉시 받아들일 수 없는 할당요구가 있을 때.
	● 정해진 시간간격 또는 CPU 효율이 일정 수준 이하로 떨어질 때.

교착상태 복구.
복구의 주체.
	● 오퍼레이터 : 교착상태 발생을 알려주면 수작업으로 복구.
	● 시스템 : 자동적으로 복구.
복구의 방법.
	● 교착상태 프로세스를 종료.
	● 교착상태 프로세스로부터 자원을 회수.
프로세스 종료.
	● 모든 교착상태 프로세스를 종료.
		○ 그동안 진행했던 내용들에 대한 복원 비용이 큼.
	● 사이클이 제거될 때까지 프로세스를 하나씩 종료.
		○ 종료 대상을 선택하기위한 비용, 매번 교착상태 재확인을 위한 비용이 큼.
자원 회수.
	● 사이클이 제거될 때까지 자원을 단계적으로 선점하여 다른 프로세스들에 할당.
	● 고려사항 : 희생자 선택, 복귀, 기아상태.



 # 복합적 접근방법.

방지, 회피, 탐지 및 복구를 복합적으로 사용.
● 자원을 유형에 따라 계층적으로 분류.
● 각 계층에 대하여 자원순서를 부여.
● 각 계층별로 방지, 회피, 탐지 및 복구 중 적절한 방법을 적용.



