
 프로세스 개요.



 # 프로세스.

프로그램.
동작을 하지 않는 정적, 수동적 개체.

프로세스 process.
실행 중인 프로그램.
운영체제로부터 자원( CPU, 메모리 등 )을 할당 받아 동작. ( CPU가 프로세스의 명령을 실행 )
사용자 및 시스템 프로세스가 존재.

PID Process ID.
실행 중인 프로그램의 ID.

프로세스 관리자의 역할.
프로세스를 생성 및 삭제.
프로세스 실행( CPU 할당 )을 위한 스케쥴 결정.
프로세스의 상태를 관리하며 상태 전이를 처리.

프로세스의 상태.
생성 : 처음 작업이 시스템에 주어진 상태. ( 실행 요청에 대한 인지 )
준비 : 실행 준비가 되어 CPU 할당을 기다리는 상태.
실행 : 프로세스가 처리되는 상태.
대기 : 프로세스가 특정 자원을 할당받을 때까지 작업이 보류되는 상태.
종료 : 모든 처리가 완료되어 사용자에게 반환되는 상태. ( 강제 종료도 가능 )

디스패치.
준비상태에서 실행상태로 바뀌는 과정. ( CPU를 할당 받음 )

프로세스 제어 블록 Process Control Block.
프로세스의 관리를 위한 목적.
프로세스의 정보를 보관.
각 프로세스마다 존재.
프로세스가 진행함에 따라 내용 변경.
프로세스 상태, PID, PC, 레지스터들, 메모리 관리 정보, 프로세스 우선순위 등의 정보가 존재.

프로세스 생성 작업.
프로세스의 이름( 번호, PID ) 결정.
준비 큐에 삽입.
초기 우선순위 부여.
프로세스 제어 블록 PCB 생성 등.

프로세스 생성 시스템 호출.
하나의 프로세스가 프로세스 생성 시스템을 호출을 통해 새로운 프로세스를 생성.
호출하는 프로세스 : 부모 프로세스. ( 예 : fork( ) )
생성되는 프로세스 : 자식 프로세스.
시스템 프로세스와 사용자 프로세스 모두 부모 프로세스 가능.
부팅시 만들어지는 시스템 프로세스가 최상위 부모 프로세스가 된다.

생성되는 프로세스의 자원.
운영체제로부터 직접 얻는 경우.
부모 프로세스 자원의 일부를 얻는 경우.
자식 프로세스의 자원은 부모 프로세스의 자원으로 제한.
과도한 자식 프로세스 생성에 따른 시스템 과부하 방지.

프로세스 종료.
프로세스의 마지막 명령이 실행을 마치는 경우.
프로세스 종료 시스템 호출. ( 예 : exit( ) )
프로세스 종료 후 부모 프로세스에게 실행결과를 되돌려 줌.

프로세스 종료 시스템 호출.
부모에 의해서만 호출.
자식 프로세스가 할당된 자원의 사용을 초과할 때 혹은 더 이상 필요치 않을 때.

독립적 프로세스.
다른 프로세스의 영향을 받지도 않고 주지도 않음.
다른 프로세스와 프로세스 상태를 공유하지 않음.
입력에 따른 결과가 항상 같다.
다른 프로세스와 무관하게 중단 및 재시작 가능.
다른 프로세스와 데이터를 공유하지 않음.

유기적 프로세스.
다른 프로세스와 영향을 주고 받음.
다른 프로세스와 프로세스 상태를 공유함.
입력에 따른 결과가 다를 수 있다. ( 다른 프로세스에 영향을 받음 )
다른 프로세스와 데이터를 공유함.



 # 쓰레드.

전통적인 프로세스.
처리의 기본 단위.
자원 소유( 하나의 주소공간 )의 단위 및 디스패칭( 하나의 제어 흐름 )의 단위.
단일 프로세스 내에서 동시처리 불가능.

쓰레드 Thread.
프로세스 내에서의 다중처리를 위해 제안된 개념.
하나의 프로세스 내에는 하나 이상의 쓰레드가 존재.
하나의 쓰레드 내에서는 하나의 실행점만 존재.
실행에 필요한 최소한의 정보만을 가지며, 자신이 속해 있는 프로세스의 실행환경을 공유.

다중 쓰레드의 장점.
멀티 CPU 혹은 멀티코어 시스템에서는 병렬처리 가능.
처리 속도 별도 쓰레드가 나눠진 경우 효율적인 처리 가능.



 # 스케줄링.

상위단계 스케줄링.
시스템에 들어오는 작업들을 선택하여 프로세스를 생성한 후 프로세스 준비 큐에 전달.
시스템의 자원을 효율적으로 이용할 수 있도록 우선순위를 선택.
입출력 중심 작업과 연산 중심 작업을 균형있게 선택.

하위단계 스케줄링.
사용 가능한 CPU를 준비상태의 어느 프로세스에게 배당할지를 결정.
CPU를 배당받은 프로세스는 결국 실행상태가 되어 프로세스가 됨.
수행 주체는 디스패처 dispatcher이다.

중간단계 스케줄링.
프로세스를 일시적으로 메모리에서 제거하여 중지시키거나 다시 활성화시킴.
시스템에 대한 단기적인 부하를 조절.

스케줄링 기본 목표.
공정성 : 모든 프로세스가 적정 수준에서 CPU 작업을 할 수 있게 함.
균형 : 시스템의 자원들이 충분히 활용될 수 있게 함.

일괄처리 운영체제의 스케줄링 목표.
처리량의 극대화.
반환시간의 최소화.
CPU 활용의 극대화.

대화형 운영체제의 스케줄링 목표.
빠른 응답시간.
과다 대기시간 방지.

실시간 운영체제의 스케줄링 목표.
처리 기한을 맞춤.

문맥.
CPU의 모든 레지스터와 기타 운영체제에 따라 요구되는 프로세스의 상태.

문맥교환.
CPU의 현재 실행하고 있는 프로세스의 문맥을 PCB에 저장하고 다시 실행될 때 복원하는 작업.

선점 preemptive 스케줄링 정책.
진행 중인 프로세스에 인터럽트를 걸고 다른 프로세스에 CPU를 할당하는 스케줄링 전략.
높은 우선순위의 프로세스를 긴급하게 처리하는 경우에 유용.
대화식 시분할 시스템에서 빠른 응답시간을 유지하는데 유용.
문맥 교환에 따른 오버헤드 발생.

비선점 nonpreemptive 스케줄링 정책.
프로세스가 CPU를 할당받아 실행이 시작되면 종료할 때까지 실행상태에 있게 됨.
모든 프로세스가 공정하게 순서에 따라 실행됨 ( 응답시간 예측 가능 )
짧은 프로세스가 긴 프로세스를 기다리게 될 수 있음.





