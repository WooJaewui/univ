
 병행 프로세스(1)



 # 병행 프로세스의 개념.

병행성 concurrency.
여러 개의 프로세스 또는 쓰레드가 동시에 실행되는 시스템의 특성.

CPU의 개수에 따른 병행 프로세스의 실행 형태.
하나의 CPU에서 인터리빙 형식으로 실행.
여러 개의 cpu에서 병렬 처리 형식으로 실행.

메모리 구조에 따른 병행 프로세스의 실행 형태.
강결합 멀티프로세서 시스템.
	- 공유 메모리 구조.
	- 하나의 컴퓨터에서 CPU가 여러개인 경우.
약결합 멀티프로세서 시스템.
	- 분산 메모리 구조.
	- 여러 개의 컴퓨터에 통신선을 통해 메모리 공유.

병행 프로세스들이 상호작용 하는 경우 발생하는 문제.
공유자원 점유 문제.
동기화 문제.
통신 문제.

상황에 따른 구분.
단일 프로세스 내의 병행성.
	- 우선 순위 그래프 DAG Directed Acyclic Graph.
		- 정점 : 문장.
		- 방향 있는 간선 : 우선순위 관계.
	- Fork / Join 구조.
		- fork L : 2개의 병행 수행을 만듦 ( 레이블 L 위치, fork 명령어 다음 )
		- join n : 병행하는 n개의 흐름을 하나로 재결합.
	- 병행문.
		- I개의 프로세스가 여러 가닥의 병렬 프로세스로 분할되었다가 다시 하나로 결합.
		- parbegin / parend 문 ( 병행 / 결합 )
프로세스 간의 병행성.
	- 비동기 병행 프로세스



 # 동기화와 임계영역.

프로세스 동기화.
2개 이상의 프로세스에 대한 처리순서를 결정하는 것.
	- 동시에 사용할 수 없는 공유자원.
	- 한 프로세스의 처리 결과에 따라 다른 프로세스의 처리가 영향을 받는 경우.

임계 영역.
2개 이상의 프로세스가 동시에 액세스하면 안 되는 공유자원을 액세스하는 코드 영역.

상호 배제.
2개 이상의 프로세스가 동시에 임계영역에 진입하지 못하도록 하는 것.

임계영역 문제 해결을 위한 요구조건.
상호배제.
	- 한 프로세스가 임계영역에서 실행 중일 때 다른 어떤 프로세스도 실행될 수 없음.
진행.
	- 임계영역에 여러 프로세스가 진입하고자 할 때 적절히 결정해서 실행해야 된다.
제한된 대기.
	- 대기하는 프로세스에 진입 허가 횟수에 제한을 부여해야 함.

Test-and-Set 명령어 TS 명령어. ( 임계영역 해결 방법 )
- 상호배제의 하드웨어적 해결 방법.
- 분리가 불가능한 단일 기계 명령어 ( 원자적으로 수행 )
- 진입영역에 사용해서 임계영역에 진입여부를 확인한다.
- 해제영역에서 lock을 false로 바꿔서 임계영역에 들어갈 수 있도록 한다.
- 문제점.
	- 많은 프로세스가 임계영역에 들어가기를 원할 때 기아가 발생할 수 있음.
	- Busy waiting을 함으로써 다른 작업이 사용할 수 있는 CPU 사이클을 낭비.
- 기아 starvation.
	- 프로세스가 필요한 자원할달을 받지 못하고 계속적으로 대기하게 되는 상황.

세마포어 semaphore. ( 임계영역 해결 방법 )
- Dijkstra가 제안한 동기화 도구.
- 세마포어 s : 사용 가능한 자원의 수 또는 상태를 나타내는 값을 저장하는 정수형 공용변수.
- 세마포어 s는 두 표준단위 연산 P와 V에 의해서만 접근됨.
	- P(s) : 검사, 감소시키려는 시도.
	- V(s) : 증가.
	- mutex : 세마포어를 의미하는 변수. ( 초기값은 1 )
- 진입영역에 P(mutex)연산을 사용하고, 해제영역에 V(mutex)연산을 사용한다.
- 동기화 문제 해결.
	- 프로세스1이 문장 s1을 실행한 후 프로세스2가 문장 s2를 실행. ( block/wakeup 프로토콜 )
	- p(sync)에서 sync 초기값을 0으로 두고, v(sync)가 실행된 후 실행되게 만들 수 있다.





