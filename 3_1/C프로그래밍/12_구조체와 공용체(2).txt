
 구조체와 공용체(2)



 # 함수와 구조체.

함수에서의 구조체 사용.
1. 구조체를 함수의 매개변수로 사용.
2. 구조체 포인터를 함수의 매개변수로 사용.

구조체를 함수의 매개변수로 사용.
● 일반변수를 함수의 매개변수로 사용하는 것과 동일.
● 매개변수가 구조체인 경우 함수의 형식매개변수를 구조체로 선언.
● 해당 구조체 전체가 복사되기 때문에 편리.
● 구조체 전체가 복사되기 때문에 시간이 많이 걸리고, 기억공간의 낭비가 심하다.

사용 예시.
#include <stdio.h>
void main( ) { 
	struct num nubmer1;
	number1.x = 10;
	number2.y = 20;
	number1 = calc( number1 );
	printf( "%d, %d ", number1.x, number1.sum )
}
struct num calc( struct num number2 ) { 
	number2.sum = number2.x + number2.y;
	...
}

구조체 포인터를 함수의 매개변수로 사용.
● 일반적으로 구조체 포인터를 함수의 매개변수로 사용.
● 구조체를 복사하지 않기 때문에 실행속도가 향상되고, 기억공간의 사용효율도 좋다.



 # typedef.

typedef.
● 이미 존재하는 자료형에 새로운 이름을 붙이기 위한 키워드.
● 간단하거나 의미있는 이름으로 바꿀 수 있어 프로그램 이해가 쉽다.
● 구조체 형을 선언하는데 많이 사용.
● 예시 : typedef int INT;

사용예시.
typedef struct data {
	int x;
	int y;
} DATA;



 # 구조체의 비트필드.

구조체의 비트필드 bit field.
● 주기억장치의 기억공간을 byte 단위가 아닌 bit 단위로 사용.
	○ 프로그램 시 bit 단위의 연산이 필요할 경우 int형 변수를 사용.
	○ 이때 int형은 4byte 이므로 1bit를 제외한 31bit의 기억공간이 낭비.
	○ 기억공간을 좀 더 효율적으로 사용할 수 있다.

구조체 비트필드의 정의.
struct 비트필드명 { 
	unsigned a : 1; 	// 1비트
	unsigned b : 2;	// 2비트
	...
}



 # 공용체의 개념.

공용체 union란?
● 동일한 기억장소에 여러 유형의 자료를 저장하기 위해서 프로그래머가 선언한 자료형.
● 공용체 안에 포함된 자료들이 같은 기억장소를 공유하여 사용.
● 사용될 자료의 자료형이 유동적일 경우 기억 공간을 효율적으로 사용할 수 있는 장점.

공용체의 예.
공용체의 멤버들이 완전히 다른 자료형을 가질 때 기억공간을 절약하기 위해 사용.

공용체의 정의.
union 공용체명 { 
	멤버 1;
	멤버 2;
	...
}



 # 공용체의 사용.

공용체.
● 공용체의 멤버 중에서 자료크기가 가장 큰 멤버에 대해서만 기억공간이 할당.
● 기억 공간의 시작 위치부터 각 부분을 다른 멤버가 공용으로 사용.

사용 예시.
#include <stdio.h>
void mian( ) { 
	union test { 
		short int i;
		float f;
		double d;
	}

	union test u;
	u.i = 100;
	print( u.i );
	u.f = 123.4;
	print( u.f );
	u.d = 45.4;
	print( u.d );
}



