
 배열과 포인터(2)



 # 포인터의 개념.

포인터 pointer.
● 변수의 일종이다.
● 특정 데이터가 저장된 기억장소의 주소값을 가지고 있음.

일반적인 변수의 기억공간 표현.
● 변수는 변수 선언에 의해 기억공간이 할당되고 할당된 기억공간에 변수에 대입된 데이터가 저장.
● 할당된 기억공간은 주소가 부여되어 있다.

포인터의 개요.
● 주소를 이용하여 변수와 같은 동일한 작업 가능.
● 주소값을 다룰 수 있는 변수가 필요하다.



 # 포인터변수의 선언과 참조.

포인터변수의 선언.
● 자료형 * 포인터변수명 ;
● 예 : int * p ;
● 변수 p는 포인터 변수로서 정수형의 자료를 갖는 변수의 주소를 갖는다.
● * p : 해당 주소에 있는 정수형 값을 갖고 있다.

포인터변수의 올바른 참조 방법.
int *p , i=4 ;
p = &i
*p = 10 ;	// i = 10 ;

void형 포인터.
● void * 포인터명 ;
● 의미 : 프로그램 실행시에 자료형이 결정되는 경우에 사용. 
● 저장하기 전에 명시적인 형변환이 필요.

void형 포인터 사용예.
void main( ) { 
	int a = 100 ;
	void * p = NULL ;
	p = ( int * ) & a ;
	...
}



 # 포인터 연산.

포인터와 기억공간의 대응관계.
● 포인터를 1 증가시키면 실제 주소는 int형의 경우 4byte 증가. ( 자료형에 따라 다르다 )
● p -> p+1 -> p+2 -> ...

포인터 연산.
● 포인터변수에 + , - , ++ , -- 연산자를 사용하는 연산.
● 사용예 : p=&a[7] , p=a-3 , ...
● 주의사항 : 두 포인터간의 덧셈은 안됨. ( 뺄셈만 가능 )

포인터 연산 주의사항.
* p + 2 와  * ( p + 2 )를 구분해서 사용하자.
* p + 2 : p의 값 + 2
* ( p + 2 ) : ( p의 주소값 + 2 ) 의 값.




