
 배열과 포인터(3)



 # char형 포인터.

char형 포인터.
● 포인터는 문자열 처리에 효과적.
● 문자열 처리에 char형 포인터 사용.
● char * cp = "COMPUTER" ;



 # 포인터와 배열의 관계.

포인터를 이용한 1차원 배열의 참조.
char s[ ] = "SCIENCE" ;
char * cp ;
cp = s ;

포인터를 이용한 2차원 배열의 참조.
int a[2][3] ;
int * pt ;
pt = a ;

포인터와 배열의 관계.
int A[ ] = { 10, 20, 30, 40, 50 } ;
int * p , i ;
A + i == &A[ i ]
A[ i ] == * ( A + i )
* ( p + i ) == p[ i ] 

포인터와 배열의 값 변경.
A[i] 에서 A++, A--와 같이 값 변경 불가.
* p 에서 p++, p--와 같이 값 변경 가능.

배열.
기억공간 중 자료영역을 고정적으로 확보.

포인터.
기억공간 중 자료영역을 유동적으로 확보.
	● 필요할 때만 자료용 기억 공간을 확보.
	● 자료의 개수가 가변적인 경우 효과적.
	● 포인터가 배열보다 활용의 폭이 넓다.



 # 포인터 배열.

포인터 배열.
● 포인터가 여러 개 사용될 때 포인터 배열로 선언.
● 주로 문자열 배열 처리에 사용.

포인터 배열 선언과 기억공간 표현.
char * PA[4] ;
PA[0] = "Hello" ;
PA[1] = "world" ;
PA[2] = "DATA" ;
PA[3] = "SYSTEM" ;



 # 이중 포인터.

이중 포인터의 개념.
● Pointer to pointer.
● 이중 포인터가 가리키고는 주소로 가보면 주소 값이 들어 있고, 그 주소에 자료가 들어 있음.
● 포인터 변수에 다시 포인터를 지정하는 것.

이중 포인터의 선언.
● int ** p ;
● p : 기억공간 주소.
● * p : 주소 P에 수록되어 있는 값.
● ** p : 주소가 * p인 곳에 수록되어 있는 값.





