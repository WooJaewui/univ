
 자료형과 선행처리기.



 # 상수와 변수.

자료형.
프로그램에서 사용하는 자료의 형태.
상수와 변수로 구분하여 사용.
프로그램에서 자료처리를 위해서는 자료의 생성과 저장, 처리과정이 필요.
	- C는 수많은 명령어와 자료들로 구성.
	- 이들 자료의 정확한 처리와 효율적인 활용이 필요.

상수 constant.
항상 고정된 값을 갖는 자료.
값이 한번 정해지면 프로그램 도중 그 값을 변경할 수 없는 수.

정수형 상수.
10진수, 8진수, 16진수로 표현.
10진수 : 10, -10, 999, ...
8진수 : 011, 055, ... ( 앞에 0을 붙임 )
16진수 : 0xac, 0X02, ... ( 앞에 0x 또는 0X를 붙임 )
unsigned형 상수 : 12u, 067u, ... ( 뒤에 u 나 U를 붙임 )
long형 상수 : 1234l , 1223L, ... ( 뒤에 l 또는 L을 붙임 )

실수형 상수.
부동소수점형 상수.
double형을 기본 자료형으로 사용.

문자형 상수.
단일 인용부호 ' '로 묶여 있는 1개의 영문자나 숫자문자.
내부적으로는 해당문자의 ASCII 코드값이 사용.
Escape 문자 : 키보드에 나타나 있지 않은 문자.

문자열 상수.
이중 인용부호 " "로 묶여 있는 복수개의 영문자나 숫자문자.
기억공간에 보관될 때는 문자열 끝에 null 문자( \0 )가 추가.

변수 variable.
변할 수 있는 값.
프로그램 실행 도중 변할 수 있는 값이 저장되는 기억공간을 의미.
변수는 사용 전에 반드시 선언하여 컴파일러가 기억공간에서 일정공간을 확보할 수 있도록 해야 함.

변수의 특징.
모든 변수는 이름이 있다. ( 변수명 )
모든 변수는 정해진 자료형이 있다.
모든 변수는 할당된 값을 갖는다.

변수명의 정의 규칙.
모든 변수는 사용되기 전에 선언되어야 한다.
변수명은 반드시 영문자나 밑줄로 시작해야 한다.
변수명은 중간에 숫자, 밑줄을 섞어서 명명할 수 있다.
변수명은 대, 소문자를 구별하여 사용한다.
변수명으로 예약어들은 사용할 수 없다.



 # 자료형과 변수 선언.

변수.
자료를 저장할 기억공간을 확보하고 이 공간에 이름을 붙여준 것.

변수 선언.
확보된 기억공간에 이름을 부여하는 것.
변수 선언을 위해 자료형이 필요.

자료형의 종류.
기본형.
	- 정수형 : int, short, long, unsigned.
	- 실수형 : float, double, long double.
	- 문자형 : char, unsigned char.
	- 열거형 : enum.
	- 형 없음 : void.
확장형.
	- 배열형, 함수형, 포인터형, 구조체형 등.

정수형의 크기와 범위.
int 형, short 형, long 형, unsigned 형.
운영체제에 따라 표현범위가 다름.
short int : 2byte , long int : 4byte , int : 4byte.

실수형의 크기와 범위.
float 형, double 형, long double 형. ( 기본형은 dobule )
float : 4byte , double : 8byte , long double : 8byte.

문자형의 크기와 범위.
char 형, unsigned char 형.
ASCII 코드를 사용하여 처리.
char : 1byte , unsigned char : 1byte.

열거형의 크기와 범위.
숫자 대신 단어를 사용.
enum 태그명 { 열거자1, 열거자2, ... }

변수 선언.
변수명과 변수가 가질 자료형을 지정하여 변수를 위한 기억공간을 할당하는 것.

변수 선언 시 고려 사항.
변수에 저장될 값의 크기. ( 자료형의 범위 )
변수의 선언 위치. ( 전역변수, 지역변수 )
변수의 초기화.



 # 선행처리기.

선행처리기 preprocessor.
컴파일에 앞서 프로그램 선두에 선언된 지시자들을 미리 처리하는 역할을 수행.

선행처리기의 종류.
#include : 파일 포함.
#define : 매크로 정의.
#if #else #elif #endif : 조건부 컴파일.

선행처리기를 사용할 때 주의할 점.
반드시 #로 시작해야 한다.
명령문 끝에는 세미콜론을 붙이지 않는다.
한 줄에 하나의 명령만 쓴다.
소스 프로그램의 첫 부분에 위치한다.

#include.
C언어에서 제공되는 헤더파일( *.h )를 자신의 소스파일에 읽어 같이 컴파일 하고자 할 때 사용.
printf( ), sacnf( ) 사용.
	- 표준 입출력 헤더파일인 #include <stdio.h>를 해야함.
	- <파일명>은 표준 디렉토리에서 파일을 찾아 포함. ( 보통 include 디렉토리 )

#define.
매크로를 정의할 때 사용.
매크로 macro.
	- 선행처리기 #define을 사용하여 단순 치환되는 자료.
	- 프로그램 작성 시에 명령이나 수식 또는 상수값이 자주 사용될 때 이름을 붙여 사용하는 대상.
사용 예.
	- #define PI 3.141592 ( PI는 3.141592로 치환하라는 것 )
	- #define 함수이름( a , b ) ( a+ b )

#if #else #elif #endif.
조건에 따라 프로그램을 컴파일하는 명령.
최적의 코드로 프로그램을 작성할 수 있기 때문에 시스템의 성능 향상.
조건문.
	- 조건문은 선행처리과정에서 진위 여부를 판단할 수 있어야 함.
	- 변수 지정이나 함수 호출 불가.
	- 주로 매크로 값이 사용.
사용 예.
	- #define CONDITION 1
	  #if CONDITION 조건이 true일 때 실행할 코드 ;
	  #else 조건이 false일 때 실행할 코드 ;



