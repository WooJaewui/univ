
 C 프로그래밍.



 # 1교시.

C언어.
프로그래밍 언어.

프로그래밍 언어.
사람과 컴파일러가 이해할 수 있도록 약속된 형태의 언어.
	● 저급언어 : 기계어, 어셈블리어.
	● 고급언어 : C, C++, C#, Java, PHP 등.

컴파일러.
프로그래밍 언어로 작성된 프로그램을 컴퓨터가 이해할 수 있도록 기계어로 번역해주는 번역기.
	● 어셈블러 assembler : 기호로 표현된 어셈블리 코드를 기계어로 번역하는 번역기.
	● 인터프리터 interpreter : 프로그램을 한 단계식 기계어로 해석하여 실행하는 언어처리 프로그램.

C 언어의 역사.
Denis Ritchie 1972년.
UNIX 운영체제 구현에 사용할 목적으로 개발.
	● 컴퓨터 기종간 호환성을 가진 고급이면서, 하드웨어를 완벽히 제어할 수 있는 새로운 언어가 필요.
어셈블리 언어로 된 UNIX 운영체제가 거의 C 언어로 대체.

C 언어의 특징.
프로그램 이식성이 높다.
간단한 문법표현으로 함축적인 프로그램 작성이 용이하다.
저급언어 특성을 가진 고급언어이다.

C 프로그램의 작성 및 준비.
프로그램 개발 단계.
	● 에디터와 컴파일러 필요.
	● 에디터 : 소스코드를 작성하여 저장할 수 있도록 도와주는 도구.
	● C 컴파일러 : Turbo C/C++, Borland C/C++, MS C/C++, Visual C++, GCC 등.
	● C 코드 확장명은 .c , C++ 코드 확장명은 .cpp
C 프로그램의 완성 코정.
	● 코딩 단계 : 주어진 문제에 대한 설계를 바탕으로 소스코드를 작성하여 소스파일을 생성하는 과정.
	● 컴파일 단계 : 소스파일이 목적파일로 변환되는 과정.
	● 링킹 단계 : 목적파일을 실행파일로 변환하는 과정.
	● 최근에는 링킹 과정 없이 바로 실행파일을 생성한다.



 # 2교시.

C 예시 코드 작성.
#include <stdio.h>
int add( int x, int y ) ;
void main(){
	int i, j, sum;
	i = 10, j = 20;
	sum = add( i , j );
	printf( "%d + %d = %d " , i , j , sum );
}
int add( int x, int y ) {
	int tot;
	tot = x + y;
	return tot;
}

C 프로그램의 기본 구조.
도입부.
	● 프로그램 전체에 적용되는 사항을 기술.
호출된 함수.
 	● main( )함수에서 호출되는 함수에 대한 정의.
main( ) 함수.
	● main( )함수는 가장 먼저 호출되는 함수로서 모든 프로그램에 반드시 존재.
특징.
	● C 프로그램은 반드시 하나 이상의 함수를 포함해야 한다.
	● main( ) 함수가 반드시 존재해야 한다.
	● 함수의 시작과 끝을 알리는 중괄호 { } 를 사용해야 한다.
	● 중괄호 안에는 변수선언문, 치환문, 연산문, 함수 등의 명령을 기입한다.
	● 선행처리기를 제외하고 문장의 끝에는 세미콜론을 붙인다.

C 프로그램의 구성 요소.
● 예약어 : int, char, if, for, ...
● 명칭 : 변수, 배열, 함수 등의 이름.
● 상수 : 값이 불변인 자료.
● 연산자 : = , - , * , / , ++ 등.
● 설명문 : 프로그램에 대한 주석.

예약어 reserved word.
자료형 관련 예약어 : char, int, float, short 등.
기억 관련 예약어 : auto, static, extern, register 등.
제어 관련 예약어 : if ~ else, for, while, do ~ while, switch ~ case, break 등.
기타 예약어 : main, sizeof, include 등.

명칭을 만들 때의 규칙.
영문자와 숫자의 조합으로 만든다.
명칭의 첫 문자는 영문자나 밑줄이어야 한다.
특수문자를 사용해서는 안 된다.
문자 사이에 공백이 있어서는 안 된다.
예약어를 사용할 수 없다.
영문자 대문자와 소문자는 서로 구별하여 사용.
명칭의 길이는 컴파일러에 따라 차이가 있다.

상수 constant.
수치 상수, 문자 상수, 문자열 상수.

연산자 operator.
연산자를 사용하여 각종 연산 수행.
다른 언어에 비해 많은 연산자.

설명문( 주석문 )
여러 줄에 걸친 설명문을 넣기 위해서는 /* 와 */을 사용.
한 줄짜리 설명문을 넣기 위해서는 보통 //을 사용.
프로그램의 어느 부분에도 위치할 수 있다.
2개 이상의 라인으로 계속될 수 있다.

에러 error.
C 언어의 문법상 잘못된 경우 에러 메시지를 출력.
에러 메시지를 확인하여 반드시 수정하여야 한다.

경고 warning.
경고는 일단 컴파일은 가능한 경미한 실수를 했을 때 발생.
C 언어 문법에서 권장하지 않는 방법으로 소스 프로그램을 작성했을 때도 발생.
경고 메시지의 내용을 파악하여 타당한 지적이라면 수정하고, 그렇지 않다면 무시하여도 상관없음.
경고를 무시해도 실행파일을 생성하여 실행할 수 있는 경우가 많다.



 # 3교시.

자료형 data type. 
프로그램에서 사용하는 자료의 형태.
상수와 변수로 구분하여 사용.
	● 프로그램에서 자료( data ) 처리를 위해서는 자료의 생성과 저장, 처리 과정이 필요.
	● C 언어는 여러 가지 종류의 자료형을 지원.

상수 constant.
항상 고정된 값을 갖는 자료.
값이 한 번 정해지면 프로그램 도중 그 값을 변경할 수 없는 수.
	● 정수형 상수.
		○ 10진수, 8진수, 16진수로 표현. 
		○ 앞에 0 = 8진수, 앞에 0x = 16진수, 뒤에 u = unsigned.
		○ 16비트 이하의 환경에서는 정수 = 2byte , 32비트 이상에서 정수 = 4byte.
	● 실수형 상수.
		○ 부동소수점 형 사용.
		○ double형을 기본 자료형으로 사용.
		○ 소수형식 : 소수점을 사용하여 표현.
		○ 지수형식 : 10진수와 e(E)를 사용하여 표현.
		○ 뒤에 f = float형 , 뒤에 l = long double형.
	● 문자형 상수.
		○ 단일 인용부호 ' '로 묶여 있는 1개의 영문자나 숫자.
	● 문자열 상수.
		○ 이중 인용부호 " " 로 묶여 있는 복수개의 영문자나 숫자.
		○ 기억공간에 보관될 때는 문자열 끝에 null문자가 추가.

변수 variable.
변할 수 있는 값.
프로그램 실행 도중 변할 수 있는 값이 저장되는 기억공간을 의미.
변수는 사용 전에 반드시 선언하여 컴파일러가 기억공간에서 일정공간을 확보할 수 있도록 해야 함.

ASCII 코드.
7비트로 된 인코딩 부호 체계이다.

변수 선언 시 고려 사항.
무조건 변수를 초기화한 후 사용해야 된다.












