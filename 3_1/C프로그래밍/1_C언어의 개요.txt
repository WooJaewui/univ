
 C언어의 개요.



 # C언어의 정의 , 역사 , 특징.

프로그래밍 언어.
사람과 컴파일러가 이해할 수 있도록 약속된 형태의 언어.
기계어, 어셈블리어, C, C++, C#, Java, PHP 등.

컴파일러.
프로그래밍 언어로 작성된 프로그램을 컴퓨터가 이해할 수 있도록 기계어로 변역해주는 번역기.

어셈블러 assembler.
기호로 표현된 어셈블리 코드를 기계어로 번역하는 번역기.

인터프리터 interpreter.
프로그램을 한 단계씩 기계어로 해석하여 실행하는 언어처리 프로그램.

C 언어의 역사.
Denis Ritchie 1972년 개발.
UNIX 운영체제 구현에 사용할 목적으로 개발.
어셈블리 언어로 된 UNIX 운영체제가 거의 C언어로 대체.

C 언어의 특징.
프로그램 이식성이 높다.
간단한 문법표현으로 함축적인 프로그램 작성이 용이하다.
저급언어 특성을 가진 고급언어이다.



 # 프로그램의 작성 및 준비.

프로그램 개발 단계.
프로그램 목적 정의 -> 프로그램 설계 -> 소스코드 작성 
-> 컴파일/링크 -> 프로그램 실행 -> 테스트와 디버깅 -> 유지 보수.

C프로그램의 작성 및 준비.
에디터와 컴파일러가 필요하다.
에디터 : 소스코드를 작성하여 저장할 수 있도록 도와주는 도구.
C 컴파일러 : Turbo C/C++ , Dev-C++, Visual C++, GCC, ... 

C 프로그램의 완성 과정.
코딩 : 소스코드 작성하여 소스파일을 생성하는 과정.
컴파일 : 소스파일이 목적파일로 변환되는 과정.
링킹 : 목적파일을 실행파일로 변환하는 과정.

소스파일의 생성.
파일이름.c 라는 확장자를 가진 파일로 저장된다.
.c로 저장해야 C 컴파일러가 동작한다.

소스파일의 컴파일.
파일이름.c 파일을 컴파일하면 파일이름.obj 파일로 변환된다.

실행파일의 생성 ( 링킹 )
한 개 이상의 파일이름.obj 파일을 링킹하면 파일이름.exe 파일로 변환된다.
보통 컴파일 후 바로 링킹된다. ( 사용자는 링킹 과정을 확인하기 힘들다 )



 # 프로그램의 구성.

C 프로그램의 기본 구조.
C 프로그램은 반드시 하나 이상의 함수를 포함해야 한다.
main( )함수가 반드시 존재해야 한다.
함수의 시작과 끝을 알리는 중괄호 { }를 사용해야 한다.

C 프로그램 구성 요소.
예약서 , 명칭 , 상수 , 연산자 , 설명문 , ... 등.

명칭 identifier.
영문자와 숫자의 조합으로 만든다.
명칭의 첫 문자는 영문자나 밑줄이어야 한다.
특수문자를 사용해서는 안 된다.
문자 사이에 공백이 있으면 안된다.
... 등.

상수 constant.
수치 상수, 문자 상수, 문자열 상수.

설명문.
여러 줄에 걸친 설명문을 넣기 위해서는 / * 설명문 * /을 사용.
프로그램의 어느 부분에도 위치할 수 있다.



 # 에러와 경고.

에러 error.
C 언어의 문법상 잘못도니 경우 에러 메시지를 출력.
에러 메시지를 확인하여 반드시 수정하여야 한다.

경고 warning.
컴파일은 가능한 경미한 실수를 했을 때 발생.
경고를 무시하여도 실행파일을 생성하여 실행 할 수 있는 경우가 많다.





