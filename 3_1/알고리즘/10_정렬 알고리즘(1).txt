
 정렬 알고리즘.



 # 정렬의 개념.

정렬.
- 주어진 데이터를 값의 크기 순서에 따라 재배치하는 것.

내부 정렬.
- 모든 데이터를 주기억장치에 저장한 후 정렬하는 방식.

외부 정렬.
- 모든 데이터를 보조기억장치에 저장한 채 그중 일부 데이터를 반복적으로 주기억장치로 읽어 들여서 정렬하는 방식.

정렬.
- 비교 기반 알고리즘 : 버블 정렬, 선택 정렬, 삽입 정렬, 셸 정렬, 합병 정렬, 퀵 정렬, 힙 정렬. ( 키값의 비교 횟수 )
- 데이터 분포 기반 알고리즘 : 계수 정렬, 기수 정렬. ( 데이터의 이동 횟수 ) 

안정적 stable 정렬.
- 동일한 값을 갖는 데이터가 여러 개 있을 때 정렬 전의 상대적인 순서가 정렬 후에도 그대로 유지되는 정렬 방식.

제자리 in-place 정렬.
- 입력 데이터를 저장한 공간 이외에 추가적인 저장 공간을 상수 개만 필요로 하는 정렬 방식.
- 입력 크기 n이 증가함에도 불구하고 추가적ㅇ니 저장 공간은 증가하지 않음.



 # 버블 정렬.

개념과 원리.
- 모든 인접한 두 값을 비교하여 왼쪽의 값이 더 큰 경우에는 자리를 바꾸는 과정을 반복해서 정렬하는 방식.
- 패스가 한 번 일어날 때마다 하나씩 정렬된다.
- 성능 : O( n**2 )

특징.
- 안정적인 정렬 알고리즘.
- 제자리 정렬 알고리즘.
	- 추가적인 저장 공간은 상수 개 ( 제어 변수 i, j 데이터 교환을 위한 상수 )
- 입력 데이터의 상태에 따라 성능이 달라짐.
	- 역순으로 정렬된 경우 : O( n**2 )
	- 제 순서로 정렬된 경우 : O( n ) => 자리바꿈이 일어나지 않으면 종료.



 # 선택 정렬.

개념과 원리.
- 주어진 데이터 중에서 가장 작은 값부터 차례대로 '선택'해서 나열하는 방식.
- 성능 : O( n**2 )

특징.
- 언제나 동일한 시간 복잡도 O( n**2 )
	- 최솟값을 찾는 과정이 데이터의 입력 상태에 민감하지 않기 때문에
- 제자리 정렬 알고리즘.
- 안정적이지 않은 정렬 알고리즘.



 # 삽입 정렬.

개념과 원리.
- 주어진 데이터를 하나씩 뽑은 후, 나열된 데이터들이 항상 정렬도니 형태를 갖도록 뽑은 데이터를 바른 위치에 삽입해서 나열하는 방식.
- 성능 : O( n ** 2 )

원리.
1. 입력 배열을 정렬 부분과 미정렬 부분으로 구분한다.
2. 모든 숫자가 정렬되지 않은 경우 첫 번째 데이터는 정렬됐다고 가정한 후 진행한다.
3. 미정렬 부분에서 첫 번째 데이터를 뽑은 후, 정렬 부분에서 제자리를 찾아 뽑은 데이터를 삽입하는 과정을 반복.

특징.
- 입력된 데이터의 상태에 따라 성능이 달라짐.
	- 역순으로 정렬 : O( n**2 )
	- 제 순서로 정렬 : O( n )
- 안정적인 정렬 알고리즘.
- 제자리 정렬 알고리즘.
- 삽입될 위치를 찾기 위해 한 번에 한 자리씩만 이동.
	- 데이터의 이동이 여러 번 발생.



 # 셸 정렬.

개념과 원리.
- 삽입 정렬의 단점 보완.
	- 멀리 떨어진 데이터와 비교/교환해서 처리 속도 향상.
	- 처음에는 멀리, 점차 가까운 위치의 데이터를, 마지막에는 인접한 데이터를 비교/교환하는 방식.
	- 입력 배열을 부분배열로 나누어 삽입 정렬을 수행하는 과정을 부분배열의 크기와 개수를 변화시켜 가면서 반복.

성능 분석.
- 간격의 크기 D를 계산하는 방식에 따라 성능이 달라짐.
	- 최악의 경우 : O( n**2 )
	- 최선의 경우 : O( nlogn )

특징.
- 가장 좋은 간격을 찾는 것은 미해결 과제.
- 간격의 크기 D는 순열의 역순으로 차례대로 적용.
- 제자리 정렬 알고리즘.
- 안정적인지 않은 정렬 알고리즘.


















