
 욕심쟁이 알고리즘(1)



 # 욕심쟁이 방법의 원리.

greedy.
- 해를 구하는 일련의 선택 단계마다 전후 단계의 선택과는 무관하게 해당 단계에서 
  가장 최선이라고 여겨지는 국부적인 최적해를 선택함으로써 전체적인 최적해를 구함.

동적 프로그래밍 방법 특징.
- 최적화 문제 해결에 주로 사용.
- 최적성의 원리가 적용된 방법.
- 항상 전체적인 최적해를 구함.

욕심쟁이 방법 특징.
- 최적화 문제 해결에 주로 사용.
- 최적성의 원리가 적용된 방법.
- 전체적인 최적해를 구하지 못할 수 있음.

욕심쟁이 방법의 한계.
- 욕심쟁이 방법으로 구할 수 없는 문제도 많다.



 # 동전 거스름돈 문제.

개념과 원리.
- 가정 : 동전의 종류는 500, 100, 50, 10 이다.
- 기본 아이디어 : 거스름돈의 액수를 초과하지 않는 조건하에서 가장 값이 큰 동전부터 최대한 사용해서 거스름돈을 만듦.
- 문제점 : 가정이 없으면 욕심쟁이 방법으로 최적해를 구하지 못할 수도 있다.



 # 배낭 문제.

개념과 원리.
- 배낭의 용량을 초과하지 않는 범위 내에서 배낭에 들어 있는 물체의 이익의 합이 최대가 되도록 물체를 넣는 방법.
- 가정 : 물체를 쪼개서 넣을 수 있다.
- 기본 아이디어 : 일정한 무게당 물체의 이익을 구하고, 용량을 초과하지 않는 선에서 효율이 좋은 물체를 넣는다.
- 문제점 : 가정이 없으면 욕심쟁이 방법으로 최적해를 구하지 못할 수도 있다.

성능분석.
정렬 하지 않음 : O(n)
정렬을 고려함 : O( nlogn )

0/1 배낭 문제.
- 물체를 쪼갤 수 없는 형태의 배낭 문제.
- 기본 아이디어 : 단위 무게당 물체의 이익을 구하고, 용량을 초과하지 않는 선에서 효율이 좋은 물체를 넣는다. 
	          남는 공간이 생길 수 있다.



 # 최소 신장 트리.

그래프를 트리로 만들 수 있는 조건.
1. 방향이 없어야 된다.
2. 모든 정점이 포함되어야 한다.
3. 사이클이 없어야 된다.

신장 트리 spanning tree.
- 가중 무방향 그래프에서 모든 정점을 포함한느 연결된 트리. ( 그래프 -> 트리 )
- 정점이 n개이면, 트리에는 n-1개의 간선이 존재.

최소 신장 트리 개념과 원리.
- 신장 트리 중에서 간선의 가중치의 합이 가장 작은 트리.

최소 신장 트리 알고리즘.

크루스칼 알고리즘.
- 욕심쟁이 방법 적용.
- 사이클을 형성하지 않으며 최소의 가중치를 갖는 간선.
- 간선이 하나도 없는 상태에서 가중치가 가장 작은 간선부터 사이클을 만들지 않으면 추가시키는 방법.
- 서로 다른 연결 성분에 속하는 정점을 잇는 최소 가중치의 간선을 선택.

크루스칼 알고리즘 실행순서.
1. 연결 성분 초기화.
2. 가중치가 증가하는 순으로 모든 간선을 정렬.
3. 가중치가 가장 작은 간선을 선택하고 서로 다른 연결 성분에 속하는지 확인한 후 다른 경우 연결. ( 반복 )

프림 알고리즘.
- 욕심쟁이 방법 적용.
- 사이클을 형성하지 않으며 최소의 가중치를 갖는 간선.
- 임의의 한 정점에서 시작해서 연결된 정점을 하나씩 선택해 나가는 방법.
- 이미 선택된 정점에 부수된 가중치가 최소인 간선을 추가하는 방법.

프림 - 성능분석.
인접 행렬의 경우 : O( |V| ** 2 )
인접 리스트 + 힙 사용 : O( ( |V| + |E| ) log|V| )




