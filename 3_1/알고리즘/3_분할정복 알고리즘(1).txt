
 분할정복 알고리즘(1)



 # 분할정복 방법의 원리.

분할정복 방법.
● 순환적으로 문제를 푸는 하향식 접근 방법.
	1. 주어진 문제의 입력을 더 이상 나눌 수 없을 때까지 두 개 이상의 작은 문제로 순환적으로 분할.
	2. 분할된 작은 문제들을 각각 해결한 후 이 해들을 결합해서 원래 문제의 해를 구하는 방식.
● 분할된 작은 문제는 원래 문제와 동일.
	○ 단, 인력 크기만 작아짐.
● 분활된 문제는 서로 독립적.
	○ 순환적 분할 및 결과 통합이 가능.

분할정복 방법의 처리 단계.
● 분할 : 주어진 문제를 여러 개의 작은 문제로 분할한다.
● 정복 : 작은 문제를 순환적으로 분할, 작은 문제의 해를 구한다.
● 결합 : 작은 문제에 대해 정복된 해를 결합하여 원래 문제의 해를 구한다. ( 결합 단계가 없는 문제도 존재 )

적용 알고리즘의 종류 및 분할 과정.
● 이진 탐색 : 똑같은 양을 선택적으로 반으로 쪼갠다.
● 합병 정렬 : 똑같은 양으로 반으로 쪼갠다.
● 퀵 정렬 : 반으로 나눌 때, 나누는 양이 다르게 쪼갤 수 있다.
● 선택 문제 : 다른 양을 선택적으로 반으로 쪼갠다.



 # 이진 탐색.

이진 탐색.
정의
	● 정렬된 상태의 입력 데이터에 대한 효과적인 탐색 방법.
개념과 원리.
	● 분할 : 배열의 가운데 원소를 기준으로 오른쪽 왼쪽으로 분할.
	● 정복 : 탐색키가 가운데 원소보다 작으면 왼쪽, 반대면 오른쪽.
	● 결합 : 필요 없음. ( 부분배열에 대해서 탐색 결과를 직접 반환 )
탐색 방법.
	● 가운데 원소의 값을 확인한다.
	● 가운데 원소의 값이 내가 원하는 값보다 크면 왼쪽의 값들의 중간값을 탐색.
	● 가운데 원소의 값이 내가 원하는 값보다 작으면 오른쪽의 값들의 중간값을 탐색.

이진 탐색에서의 분할 및 비교 횟수.
최대 분할 횟수 : log2 n 
최대 비교 횟수 : 최대 분할 횟수 + 1

성능 분석.
T(n) : 입력 크기 n에 대한 탐색 과정에서의 모든 비교 횟수의 합.
	=> 바깔 수준에서의 비교 회수수 + 순환 호출에서의 비교 횟수.
	=> T(n) = T(n/2) + O(1) ( n>1 ), T(1) = 1
	=> T(n) = O( logn )

특징.
● 입력 배열의 데이터가 정렬된 경우에 대해서만 적용 가능.
● 삽입/삭제 연산은 부가적ㅇ니 데이터 이동을 수반.
	○ 데이터의 정렬 상태 유지를 위해서 평균 n/2개의 데이터 이동이 발생.
	○ 삽입/삭제가 빈번한 응용에서는 부적합.



 # 퀵 정렬.

퀵 정렬.
정의.
	● 특정 원소를 기준으로 주어진 배열으 두 부분배열로 분할.
	● 각 부분배열에 대해서 퀵 정렬을 순환적으로 적용하는 방식.
개념과 원리.
	● 피벗 pivot.
		○ 주어진 배열을 두 부분배열로 분할할 때 기준이 되는 특정 원소.
		○ 보통 주어진 배열의 첫 번째 원소로 지정.
		○ 피벗이 제자리를 잡도록 하여 정렬하는 방식.
	● 분할 : 피벗을 기준으로 주어진 배열을 두 부분배열로 분할한다.
	● 정복 : 두 부분배열에 대해서 퀵 정렬을 순환적으로 적용하여 각 부분배열을 정렬.
	● 결합 : 필요 없음.

분할 함수 알고리즘 Partition( ).
1. 첫번째 요소를 피벗으로 설정.
2. 피벗 + 1 에 Left , 부분 배열의 끝 요소에 right로 설정.
3. Left는 pivot보다 작은 숫자를 찾을 때까지 오른쪽으로 이동, right는 피벗보다 큰 숫자를 찾을 때까지 왼쪽으로 이동.
4. Left < right인 경우 서로 위치 바꾸기, Left > right인 경우 right와 피벗을 위치를 바꾼다.

성능 분석.
분할 함수 Partition( ) 수행 시간.
	● 피벗과의 비교 횟수 : O(n) ( 데이터의 개수만큼 pivot과 비교, 일부 요소만 2번 비교 )
퀵 정렬 QuickSort( ) 수행 시간.
	● T(n) = Left 정렬 + Right 정렬 + O(n) ( n>1 )
	● T(1) = O(1) 
	● 최악의 경우.
		○ 피벗이 항상 부분배열의 최솟값 또는 최댓값이 되는 경우.
		○ T(n) = T( n-1 ) + O(n) => T(n) = O( n**2 )
	● 최선의 경우.
		○ 배열이 항상 n/2 : n/2로 분할되는 경우.
		○ 피벗을 중심으로 항상 동일한 크기의 두 부분배열로 분할되는 경우.
		○ 피벗이 항상 부분배열의 중간값이 되는 경우.
		○ T(n) = T( n/2 ) + T( n/2 ) + O(n) => T(n) = O( nlogn ) 
	● 평균적인 경우.
		○ T(n) = O( nlogn )
	● 피벗 선택의 임의성만 보장되면 평균 성능을 보일 가능성이 매우 높음.


