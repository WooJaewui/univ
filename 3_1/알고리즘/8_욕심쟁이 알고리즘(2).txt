
 욕심쟁이 알고리즘(2)



 # 최단 경로.

최단 경로.
- 가중 방향 그래프에서 두 정점을 연결하는 경로 중에서 간선의 가중치의 합이 가장 작은 경로.

플로이드 알고리즘.
- 모든 정점 간의 최단 경로.
- 동적 프로그래밍 적용 방법.
- O( |V|**3 )
- 가중치의 합이 음수인 사이클이 없다고 가정.

데이크스트라 Dijkstra 알고리즘.
- 특정한 하나의 정점에서 다른 모든 정점으로의 최단 경로.
- 단일 출발점 최단 경로.
- 음의 가중치를 갖는 간선이 없다고 가정.

데이크스트라 알고리즘.
- 거리 d[V] : 출발점에서 현재까지 선택된 정점 집합 S를 경유하여 정점 v에 이르는 최소 경로의 길이.
- 출발점에서 시작하여 거리 d[]가 최소인 정점을 차례로 선택하여 최단 경로를 구하는 방법.
- 미선택 정점 집합 V-S에서 d[]가 가장 작은 정점 u를 선택.
- Phi[ ] : 이동할 수 있는 간선을 모아놓은 집합. ( 최단 경로를 구할 때 사용한다 )

데이크스트라 성능.
- 인접 행렬 : O( |V|**2 )
- 인접 리스트 + 힙 : O( ( |V| + |E| ) log|V| )

데이크스트라 특징.
- 음의 가중치를 갖는 간선이 없어야 함.



 # 작업 스케줄링 문제.

개념과 원리.
- 가장 적은 개수의 기계를 사용해서 작업 간의 충돌이 발생하지 않도록 모든 작업을 기계에 할당하는 문제.
- 작업 간의 충동 : 한 기계에서 두 개 이상의 작업이 동시에 수행되는 것.
- 각 작업이 시작되면 중단됨 없이 해당 기계에서 완료되어야 함.
- 기본 아이디어 : '시작 시간이 빠른 작업' 을 우선적으로 시작해서 충돌이 발생하지 않으면 기계에 배정, 충돌이 발생하면 새로운 기계에 배정.

성능 분석.
O( nlogn )



 # 작업 선택 문제.

개념과 원리.
- 하나의 기계만을 사용해서 충돌 없이 최대 개수의 작업을 기계에 할당하는 문제.
- 기본 아이디어 : 각 단계에서 '완료시간이 빠른 작업' 을 우선적으로 선택해서 충돌이 없으면 기계에 배정, 충돌이 발생하면 해당 작업을 버림.

성능 분석.
O( nlogn )



 # 허프만 코딩.

텍스트 'ababcdbad' 를 저장하는 방법.
- 8비트 아스키 코드로 표현 : 9문자 x 8비트 = 72비트.
- 고정 길이 변환 코드로 표현 : 9문자 x 2비트 = 18비트.
- 단순히 빈도수에 따른 가변 길이 변환 코드로 표현 : a -> '0' , b -> '1' , c -> '00' , d -> '01' => 12비트. ( 디코딩의 모호성 발생 )
- 모호성 없이 디코딩하려면 접두부 코드이어야 함.

접두부 코드.
- 각 문자에 부여된 이진 코드가 다른 무낮에 부여된 이즌 코드의 접두부가 되지 않는 코드.

허프만 코딩.
- 문자의 빈도 또는 확률 정보를 이용한 통계적 압축 방법.
- 텍스트에서 각 문자가 출현하는 빈도수에 따라 다른 길이의 부호를 부여.
- 접두부 코드, 최적 코드.

허프만 코딩 - 인코딩 과정.
- 주어진 텍스트에서 각 문자의 출현 빈도수를 계산.
- 각 문자의 빈도수를 이용하여 허프만 트리를 생성하여 각 문자에 이진 코드를 부여.
- 욕심쟁이 방법 적용.
- 리프 노드가 각 문자를 표시하는 전 이진트리.
- 빈도수가 작은 두 트리를 합쳐서 보다 큰 트리를 생성하는 과정을 반복.
- 왼쪽을 0 , 오른쪽을 1로 나눈다.

허프만 트리.
- 욕심쟁이 알고리즘 중 하나이다.
- 허프만 코딩에서 사용되는 트리 구조이다.
- 하나의 값에서 여러 개의 트리가 생성될 수 있다. ( 비트 수는 같다 )

디코딩 과정.
- 압축된 스트링을 처음부터 차례대로 읽으면서 주어진 접두부 코드와 일치하는 코드가 나옴녀 해당 문자로 변환.

성능분석.
- 길이가 m인 텍스트 : O( nlogn + m )

특징.
- 각 문자의 빈도수를 모르는 경우 주어진 텍스트를 2번 읽음.
	- 각 문자의 빈도수를 계산할 때.
	- 텍스트를 읽으면서 실제 인코딩할 때.
- 각 문자의 빈도수, 허프만 트리에 대한 정보, 문자 집합 정보가 필요.
	- 압축된 데이터의 헤더로써 필요한 정보를 제공. ( 실제 압축률 저하를 초래 )
- 단독으로 사용되는 경우는 거의 없다. ( 성능상 문제점이 있다 )



