
 출석수업.



 # 1교시.

점근성능.
무한대로 보내서 최대차항만 표현.

점근성능 활용.
빅 오 : 일정한 값 이후로 점근성능보다 항상 값이 큰 함수.
빅 오메가 : 일정한 값 이후로 점긍성능보다 항상 값이 작은 함수.
빅 쎄타 : 일정한 값 이후로 빅 오메가보다 크고 빅 오 보다 작음.

점화식과 폐쇄형.
2, 3, 6번 꼭 외우기.



 # 2교시.

정렬.
주어진 데이터를 값의 크기 순서에 따라 재배치하는 것.
정렬 수행 시점에 데이터가 어디에 저장되어 있는가로 정렬을 구분할 수 있다.
	● 내부 정렬 : 모든 데이터를 주기억장치에 저장한 후 정렬하는 방식.
	● 외부 정렬 : 

비교 기본 알고리즘.
● 두 개의 값 전체를 비교해서 정렬하는 방식.
	○ 버블 정렬 : O( n**2 )
	○ 선택 정렬 : O( n**2 )
	○ 삽입 정렬 : O( n**2 )
	○ 셸 정렬 : O( n**2 )
	○ 합병 정렬 : O( nlogn )
	○ 퀵 정렬 : O( nlogn )
	○ 힙 정렬 : O( nlogn )

데이터 분포 기반 알고리즘.
● 데이터가 어떤 규칙을 가지고 있어야 함.
	○ 계수 정렬 : O( n )
	○ 기수 정렬 : O( n )

안정적 stable 정렬.
동일한 값을 갖는 데이터가 여러 개 있을 때 정렬 전의 상대적인 순서가 정렬 후에도 그대로 유지되는 정렬 방식.

제자리 in-place 정렬.
입력 데이터를 저장한 공간 이외에 추가적인 저장 공간을 상수 개만 필요로 하는 정렬 방식.

퀵 정렬.
특정 원소를 기준으로 주어진 배열을 두 부분배열로 분할하고, 각 부분배열에 대해서 
퀵 정렬을 순환적으로 적용하는 방식.
left, right를 이용해서 전체의 값을 피벗과 비교하여 분할한다.

피벗 pivot.
주어진 배열을 두 부분배여롤 분할할 때 기준이 되는 특정 원소.
보통 주어진 배열의 첫 번째 원소로 지정.

분할 함수 Partition( ) 수행 시간.
피벗과의 비교 함수.

퀵 정렬 성능 분석.
최악의 경우.
	● 배열이 항상 0 : ( n-1 ) 또는 ( n-1 ) : 0으로 분할되는 경우
	● 피벗이 항상 최솟값 또는 최대값이 되는 경우.
	● 입력 데이터가 정렬된 경우 AND 피벗을 배열의 처음 원소로 정한 경우.
	● O( n ** 2 )
최선의 경우.
	● 배열이 항상 n/2 : n/2로 분할되는 경우.
	● 피벗을 중심으로 항상 동일한 크기의 두 부분배열로 분할되는 경우.
	● O( nlogn )

퀵 정렬의 성능과 특징.
● 제자리 정렬 알고리즘.
● 안정적이지 않은 정렬 알고리즘.



 # 3교시.

합병 정렬.
전형적인 분할정복 방법이 적용된 알고리즘.
	● 분할 : 배열을 동일한 크기의 두 개의 부분배열로 분할.
	● 정복 : 각각의 부분배열을 순환적으로 합병 정렬.
	● 결합 : 정렬된 두 부분배열을 합병하여 하나의 정렬된 배열을 만듦.
	● O( nlogn )	

합병 정렬의 특징.
● 안정적인 정렬 알고리즘.
● 제자리 정렬 알고리즘이 아님.
● 최선/최악/평균 수행 시간이 모두 O( nlogn )

힙 정렬.
힙 자료구조의 장점을 활용한 정렬.
	● 완전 이진 트리.
	● 각 노드의 값은 자신의 자식 노드의 값보다 크거나 같다.

힙의 장점.
임의의 값 삽입과 최댓값 삭제가 용이.

힙의 구현.
이진트리를 배열로 구현할 수 있다. ( 부모, 자식 노드를 찾아갈 수 있다 )
노드 번호가 배열의 인덱스가 된다.

최댓값 삭제.
루트 노드와 마지막 노드를 바꾼 후에 마지막 노드( 최대값 )을 삭제한다.
루트 노드( 작은 값 )을 다른 노드( 큰 값 )들과 순서를 바꿔준다.

초기 힙 구축.
1. 주어진 입력 배열의 각 원소에 대해 힙에서의 삽입 과정을 반복.
2. 주어진 입력 배열을 완전 이진 트리로 만든 다음에 노드의 값을 비교해서 정렬. ( 아래 -> 위, 오른쪽 -> 왼쪽 )

힙 정렬 특징.
● 안정적이지 않은 정렬 알고리즘.
● 제자리 정렬 알고리즘.



1. 분할 정복.
2. 탐욕정.
3. 동적 계획








