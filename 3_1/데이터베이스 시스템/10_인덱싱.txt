
 인덱싱.



 # 인덱스의 이해.

인덱스의 개념.
- 데이터 검색에서 발생하는 비효율적인 데이터 입출력 문제를 해결하기 위한 목적으로 시작.
	- 인덱스 : DBMS에서 요청된 레코드에 빠르게 접근할 수 있도록 지원하는 부가적인 구조.
	- 인덱싱 : 인덱스를 구성하고 생성하는 작업.
- 인덱스의 탐색키를 이용하여 레코드 블럭을 메모리에서 파악하여 빠르게 적재.
	- 탐색키 : 파일에서 레코드를 찾는데 사용되는 컬럼이나 컬럼의 집합.

인덱스 기반의 검색 과정.
1. 디스크에 있는 인덱스를 메모리에 적재한다.
2. 인덱스를 통해 원하는 디스크에 있는 데이터를 메모리에 적재한다.

인덱싱의 종류.
순서 인덱스 : 특정 값에 대해 정렬된 순서 구조.
해시 인덱스 : 버킷의 범위 안에서 해시 함수가 어떤 값이 어느 버킷에 할당되는지 결정.

인덱스의 평가기준.
접근 시간 : 데이터를 찾는 데 걸리는 시간.
유지 비용 : 새로운 데이터 삽입 및 기존 데이터 삭제 연산으로 인한 인덱스 구조 갱신 비용.
공간 비용 : 인덱스 구조에 의해 사용된느 부가적인 공간 비용.



 # 순서 인덱스.

순서 인덱스의 특징.
탐색키로 정렬된 순차 파일에 대하여 레코드에 대한 빠른 접근이 가능하도록 구성한 인덱스.
	- 탐색키를 정렬하여 레코드와의 연계를 통하여 인덱스 생성. ( 예 : 사전 )

순서 인덱스의 종류.
밀집 인덱스.
희소 인덱스.
다단계 인덱스.

파일의 구조화 방식. ( 복습 )
힙 파일. ( Random )
순차 파일. ( LinkedList )
해시 파일. ( Hash 구조 )

인덱스 엔트리의 구조.
탐색키 값과 포인터를 저장한다.
	- 포인터 : 블럭 ID와 레코드 주소 데이터 포인터를 저장한다.

밀집 인덱스.
모든 레코드에 대해 탐색키 값과 포인터 쌍을 유지한다.

희소 인덱스.
인덱스의 엔트리가 일부의 탐색키 값만을 유지.
인덱스와 인덱스 사이에 여러 레코드가 존재하여 인접 인덱스를 통해 데이터를 검색.

인덱스 크기에 따른 검색 성능.
인덱스 크기 < 메모리 크기.
	- 디스크 I/O이 줄어 탐색 시간이 축소.
인덱스 크기 > 메모리 크기.
	- 저장된 블럭을 여러번 나누어 읽어야 하기 때문에 디스크 I/O 비용이 증가하여 탐색 시간 증가.

다단계 인덱스.
데이터가 너무 많아서 모든 인덱스 적재하는 것이 부담이 되는 경우에 사용.
내부 인덱스와 외부 인덱스로 구성.
	- 외부 인덱스를 내부 인덱스보다 희소 인덱스로 구성.
	- 내부 인덱스보다 외부 인덱스 블럭이 훨씬 줄어든다.



 # B+ 트리 인덱스.

B+ 트리의 구조.
루트 노드로 부터 모든 단말 노드에 이르는 경로의 길이가 같은 높이 균형 트리.
	- 순서 인덱스는 파일이 커질수록 데이터 탐색 성능이 떨어지는 문제점을 해결하기 위해 제안.
	- 상용 DBMS에서도 널리 사용되는 대표적인 순서 인덱스.
노드에 탐색키, 값이 여러개 들어있다.
	- 팬아웃 fanout : 모든 탐색키 값의 개수. ( 하위 노드의 개수와 같다 )
인덱스 세트.
	- 루트노드와 중간노드로 구성.
	- 단말노드에 있는 탐색키 값을 찾아갈 수 있도록 경로를 제공하는 목적으로 사용.
	- ( n / 2 ) ~ n 사이의 개수를 자식으로 소유.
순차 세트.
	- 단말노드로 구성.
	- 모든 노드가 순차적으로 서로 연결.
	- 단말 노드는 적어도 ( n - 1 ) / 2 개의 탐색키를 포함.
	- 탐색키에 대한 실제 레코드를 지칭하는 포인터를 제공.

B+ 트리 상에서의 삽입, 삭제.
삽입.
	- 검색과 같은 방법을 사용하여 삽입되는 레코드의 탐색키 값이 속할 단말 노드를 탐색.
	- 해당 단말 노드에 <탐색키, 포인터> 쌍을 삽입.
	- 삽입 시 탐색키가 순서를 유지.
삭제.
	- 삭제될 레코드의 탐색키를 통해 삭제될 탐색키와 포인터를 포함한 단말 노드를 탐색.
	- 단말 노드에서 제거된 엔트리의 오른쪽에 있는 엔트리들은 빈 공간이 없도록 이동.
레코드 삽입
	- 노드에서 유지해야 할 탐색키와 포인터 수 증가로 인해 노드를 분할해야 하는 경우 발생.
레코드 삭제.
	- 노드에서 유지해야 할 탐색키 값과 포인터 수 감소로 재분배 또는 병합해야 하는 경우 발생.
높이 균형 유지.
	- 노드가 분할되거나 병합되면서 높이의 균형이 맞지않는 경우가 발생.

노드가 분할되는 삽입.
삽입 대상 단말 노드에 추가적인 저장할 공간 부족.
	1. 저장할 단말 노드에 공간이 부족하면 기존 단말 노드를 분할하여 공간을 생성하여 저장.
	2. 부모 노드에 탐색키를 조정하고 추가된 노드에 대한 포인터를 삽입.

탐색키가 재분배되는 삭제.
삭제 후 해당 단말 노드에 탐색키가 존재하지 않는 경우.
	1. 해당 단말 노드는 삭제 후 탐색키가 존재하지 않음.
	2. ( n - 1 ) / 2 개 보다 탐색키가 적으므로 다른 노드와 별도의 재분배 작업이 필요.
	3. 다른 단말 노드에서 인덱스를 이동시켜서 재구성한다.




