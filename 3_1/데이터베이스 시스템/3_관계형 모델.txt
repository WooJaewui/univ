
 관계형 모델.



 # 관계형 모델의 개념.

DB 모델링 과정.
사용자 요구사항 분석 -> 데이터 및 업무 -> 개념적 데이터 모델링 
-> ER 모델 -> 논리적 데이터 모델링 -> 관계형 모델 -> 물리적 데이터 모델링
-> 물리적 세부사항 -> 내부스키마.

논리적 데이터 모델링 단계.
DBMS에서 사용하는 데이터 모델에 맞추어 데이터를 표현하는 과정.
데이터 정의 언어로 기술된 개념 스키마 생성.
관계형 모델 relational model : 릴레이션으로 데이터를 표현하는 모델.

릴레이션.
2차원 테이블로 데이터를 표현하는 방식.

릴레이션의 구성.
스키마 : DB의 구조와 제약 조건에 관한 전반적인 명세를 기술한 메타데이터의 집합.
레코드 ( 튜플 ) : 행.
컬럼 , 속성 , 필드 : 열.
인스턴스 : 스키마에 들어있는 데이터들.

릴레이션의 특징.
레코드의 유일성 : 중복된 레코드의 존재가 불가능.
레코드의 무순서성 : 레코드의 순서는 의미가 없음.
컬럼의 무순서성 : 컬럼은 순서가 없고, 이름과 값의 쌍.
컬럼값의 원자성 : 모든 값들은 나눌 수 없는 단 하나의 의미.

키 key의 역할.
릴레이션의 레코드를 유일하게 식별하는 값.

키의 속성.
유일성 Uniqueness , 최소성 Irreducibility.

키의 종류.
수퍼키 : 유일성 만족.
후보키 : 유일성, 최소성 만족.
기본키 PK : 레코드의 구분을 위해 선택된 후보키
외래키 FK : 참조된 다른 릴레이션의 기본키.

키의 참조.
두 릴레이션에 포함된 레코드 간 연관성을 표현.

관계형 모델의 제약조건.
영역 제약 조건 : 컬럼에 정의된 영역( domain )에 속한 값으로만 컬럼값이 결정.
키 제약 조건 : 키는 레코드를 고유하게 구별하는 값으로 구성.
개체 무결성 제약조건 : 어떠한 기본키 값도 널이 될 수 없음.
참조 무결성 제약조건 : 반드시 존재하는 레코드의 기본키만 참조 가능.

널의 개념.
없음 또는 0이 아닌 미지의 값에 대한 표현.
입력된 적이 없는 값.
적용 불가능한 값.



 # ERD의 변환.

논리적 데이터 모델링.
DBMS의 구현 모델에 맞춰 데이터를 표현하는 과정.
데이터 정의 언어로 기술된 개념 스키마 생성.
관계형 DBMS의 구현 모델에 맞춰 데이터의 구조와 관계를 표현.
작성된 ERD를 RDBMS가 수용 가능한 구조로 변환.

ER 다이어그램의 변환.
N : N의 관계에서는 관계 해소를 위해 양측에 기본키를 외래키로 하는 릴레이션을 생성한다.
외래키가 위치한 릴레이션에 관계 속성을 생성한다.
1 : 1의 관계에서는 둘 다 외래키로 사용할 수 있지만 속성이 작은 쪽에 외래키를 만든다.
약한 개체의 경우 기본키 + 외래키를 PK로 만든다.



 # 데이터 연산.

관계 연산의 개념.
관계형 모델을 기반으로 구성된 릴레이션을 사용하여 새로운 릴레이션을 생성하는 표현.
사용자의 관점에서 필요한 데이터를 릴레이션에서 추출하는 방법을 제공하는 도구.

관계 대수 relational algebra.
관계 연산을 정의하는 방법.
주어진 릴레이션에서 필요한 릴레이션을 만드는 연산자로 구성.
관계 대수 연산자는 새로운 임시 릴레이션을 생성.
연산자를 중첩하여 연산 처리 절차를 표현.

셀렉트 연산.
주어진 릴레이션에서 조건을 만족하는 레코드를 갖는 릴레이션을 생성.
^ : and , v : or 연산.

집합 연산자.
수학적 집합 이론에서의 이진 연산.
릴레이션은 집합, 레코드는 집합에 포함된 원소.

집합 연산자 사용 조건.
두 릴레이션 차수( 컬럼의 개수 )가 동일.
모든 i에 대해 R의 u번째 컬럼의 도메인과 S의 i번째 컬럼의 도메인이 반드시 동일. ( 데이터 타입 )

카티시언 프로덕트 연산.
두 릴레이션에 포함된 레코드 간의 모든 조합을 생성하는 이항 연산자.
A 릴레이션 x B 릴레이션.

조인 연산.
두 릴레이션에서 조건을 만족하는 레코드를 결합한 레코드로 구성된 릴레이션을 생성.

집계 함수 연산.
집계 함수를 값들의 집합 또는 레코드의 집합에 적용하는 연산.
레코드 그룹화를 위해 집계 함수 연산자 앞에 그룹화 속성을 기술.
count( ) , sun( ) , ... 등





